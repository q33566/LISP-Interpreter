   yacc.py:3317:Created by PLY version 3.11 (http://www.dabeaz.com/ply)
   yacc.py:3368:
   yacc.py:3369:Unused terminals:
   yacc.py:3370:
   yacc.py:3373:    SEPRATOR
   yacc.py:3377:
   yacc.py:3378:Grammar
   yacc.py:3379:
   yacc.py:3381:Rule 0     S' -> program
   yacc.py:3381:Rule 1     empty -> <empty>
   yacc.py:3381:Rule 2     program -> stmts
   yacc.py:3381:Rule 3     stmts -> stmt stmts
   yacc.py:3381:Rule 4     stmts -> stmt
   yacc.py:3381:Rule 5     stmt -> exp
   yacc.py:3381:Rule 6     stmt -> def_stmt
   yacc.py:3381:Rule 7     stmt -> print_stmt
   yacc.py:3381:Rule 8     print_stmt -> ( PRINT_NUM exp )
   yacc.py:3381:Rule 9     print_stmt -> ( PRINT_BOOL exp )
   yacc.py:3381:Rule 10    exps -> exp exps
   yacc.py:3381:Rule 11    exps -> exp
   yacc.py:3381:Rule 12    exp -> BOOL_VAL
   yacc.py:3381:Rule 13    exp -> NUMBER
   yacc.py:3381:Rule 14    exp -> variable
   yacc.py:3381:Rule 15    exp -> num_op
   yacc.py:3381:Rule 16    exp -> logical_op
   yacc.py:3381:Rule 17    exp -> fun_exp
   yacc.py:3381:Rule 18    exp -> fun_call
   yacc.py:3381:Rule 19    exp -> if_exp
   yacc.py:3381:Rule 20    num_op -> plus
   yacc.py:3381:Rule 21    num_op -> minus
   yacc.py:3381:Rule 22    num_op -> multiply
   yacc.py:3381:Rule 23    num_op -> divide
   yacc.py:3381:Rule 24    num_op -> modulus
   yacc.py:3381:Rule 25    num_op -> greater
   yacc.py:3381:Rule 26    num_op -> smaller
   yacc.py:3381:Rule 27    num_op -> equal
   yacc.py:3381:Rule 28    plus -> ( + exp exps )
   yacc.py:3381:Rule 29    minus -> ( - exp exp )
   yacc.py:3381:Rule 30    multiply -> ( * exp exps )
   yacc.py:3381:Rule 31    divide -> ( / exp exp )
   yacc.py:3381:Rule 32    modulus -> ( MODULUS exp exp )
   yacc.py:3381:Rule 33    greater -> ( > exp exp )
   yacc.py:3381:Rule 34    smaller -> ( < exp exp )
   yacc.py:3381:Rule 35    equal -> ( = exp exps )
   yacc.py:3381:Rule 36    logical_op -> and_op
   yacc.py:3381:Rule 37    logical_op -> or_op
   yacc.py:3381:Rule 38    logical_op -> not_op
   yacc.py:3381:Rule 39    and_op -> ( AND exp exps )
   yacc.py:3381:Rule 40    or_op -> ( OR exp exps )
   yacc.py:3381:Rule 41    not_op -> ( NOT exp )
   yacc.py:3381:Rule 42    def_stmt -> ( DEFINE variable exp )
   yacc.py:3381:Rule 43    def_stmts -> empty
   yacc.py:3381:Rule 44    def_stmts -> def_stmts def_stmt
   yacc.py:3381:Rule 45    fun_exp -> ( FUN fun_ids fun_body )
   yacc.py:3381:Rule 46    fun_body -> def_stmts exp
   yacc.py:3381:Rule 47    fun_ids -> ( ids )
   yacc.py:3381:Rule 48    ids -> ID ids
   yacc.py:3381:Rule 49    ids -> empty
   yacc.py:3381:Rule 50    fun_call -> ( fun_exp params )
   yacc.py:3381:Rule 51    fun_call -> ( fun_name params )
   yacc.py:3381:Rule 52    params -> param params
   yacc.py:3381:Rule 53    params -> empty
   yacc.py:3381:Rule 54    param -> exp
   yacc.py:3381:Rule 55    variable -> ID
   yacc.py:3381:Rule 56    fun_name -> ID
   yacc.py:3381:Rule 57    if_exp -> ( IF exp exp exp )
   yacc.py:3399:
   yacc.py:3400:Terminals, with rules where they appear
   yacc.py:3401:
   yacc.py:3405:(                    : 8 9 28 29 30 31 32 33 34 35 39 40 41 42 45 47 50 51 57
   yacc.py:3405:)                    : 8 9 28 29 30 31 32 33 34 35 39 40 41 42 45 47 50 51 57
   yacc.py:3405:*                    : 30
   yacc.py:3405:+                    : 28
   yacc.py:3405:-                    : 29
   yacc.py:3405:/                    : 31
   yacc.py:3405:<                    : 34
   yacc.py:3405:=                    : 35
   yacc.py:3405:>                    : 33
   yacc.py:3405:AND                  : 39
   yacc.py:3405:BOOL_VAL             : 12
   yacc.py:3405:DEFINE               : 42
   yacc.py:3405:FUN                  : 45
   yacc.py:3405:ID                   : 48 55 56
   yacc.py:3405:IF                   : 57
   yacc.py:3405:MODULUS              : 32
   yacc.py:3405:NOT                  : 41
   yacc.py:3405:NUMBER               : 13
   yacc.py:3405:OR                   : 40
   yacc.py:3405:PRINT_BOOL           : 9
   yacc.py:3405:PRINT_NUM            : 8
   yacc.py:3405:SEPRATOR             : 
   yacc.py:3405:error                : 
   yacc.py:3407:
   yacc.py:3408:Nonterminals, with rules where they appear
   yacc.py:3409:
   yacc.py:3413:and_op               : 36
   yacc.py:3413:def_stmt             : 6 44
   yacc.py:3413:def_stmts            : 44 46
   yacc.py:3413:divide               : 23
   yacc.py:3413:empty                : 43 49 53
   yacc.py:3413:equal                : 27
   yacc.py:3413:exp                  : 5 8 9 10 11 28 29 29 30 31 31 32 32 33 33 34 34 35 39 40 41 42 46 54 57 57 57
   yacc.py:3413:exps                 : 10 28 30 35 39 40
   yacc.py:3413:fun_body             : 45
   yacc.py:3413:fun_call             : 18
   yacc.py:3413:fun_exp              : 17 50
   yacc.py:3413:fun_ids              : 45
   yacc.py:3413:fun_name             : 51
   yacc.py:3413:greater              : 25
   yacc.py:3413:ids                  : 47 48
   yacc.py:3413:if_exp               : 19
   yacc.py:3413:logical_op           : 16
   yacc.py:3413:minus                : 21
   yacc.py:3413:modulus              : 24
   yacc.py:3413:multiply             : 22
   yacc.py:3413:not_op               : 38
   yacc.py:3413:num_op               : 15
   yacc.py:3413:or_op                : 37
   yacc.py:3413:param                : 52
   yacc.py:3413:params               : 50 51 52
   yacc.py:3413:plus                 : 20
   yacc.py:3413:print_stmt           : 7
   yacc.py:3413:program              : 0
   yacc.py:3413:smaller              : 26
   yacc.py:3413:stmt                 : 3 4
   yacc.py:3413:stmts                : 2 3
   yacc.py:3413:variable             : 14 42
   yacc.py:3414:
   yacc.py:2543:Parsing method: LALR
   yacc.py:2561:
   yacc.py:2562:state 0
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> . program
   yacc.py:2565:    (2) program -> . stmts
   yacc.py:2565:    (3) stmts -> . stmt stmts
   yacc.py:2565:    (4) stmts -> . stmt
   yacc.py:2565:    (5) stmt -> . exp
   yacc.py:2565:    (6) stmt -> . def_stmt
   yacc.py:2565:    (7) stmt -> . print_stmt
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (42) def_stmt -> . ( DEFINE variable exp )
   yacc.py:2565:    (8) print_stmt -> . ( PRINT_NUM exp )
   yacc.py:2565:    (9) print_stmt -> . ( PRINT_BOOL exp )
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    (               shift and go to state 15
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2689:
   yacc.py:2714:    program                        shift and go to state 1
   yacc.py:2714:    stmts                          shift and go to state 2
   yacc.py:2714:    stmt                           shift and go to state 3
   yacc.py:2714:    exp                            shift and go to state 4
   yacc.py:2714:    def_stmt                       shift and go to state 5
   yacc.py:2714:    print_stmt                     shift and go to state 6
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 1
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> program .
   yacc.py:2566:
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 2
   yacc.py:2563:
   yacc.py:2565:    (2) program -> stmts .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 2 (program -> stmts .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 3
   yacc.py:2563:
   yacc.py:2565:    (3) stmts -> stmt . stmts
   yacc.py:2565:    (4) stmts -> stmt .
   yacc.py:2565:    (3) stmts -> . stmt stmts
   yacc.py:2565:    (4) stmts -> . stmt
   yacc.py:2565:    (5) stmt -> . exp
   yacc.py:2565:    (6) stmt -> . def_stmt
   yacc.py:2565:    (7) stmt -> . print_stmt
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (42) def_stmt -> . ( DEFINE variable exp )
   yacc.py:2565:    (8) print_stmt -> . ( PRINT_NUM exp )
   yacc.py:2565:    (9) print_stmt -> . ( PRINT_BOOL exp )
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 4 (stmts -> stmt .)
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    (               shift and go to state 15
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2689:
   yacc.py:2714:    stmt                           shift and go to state 3
   yacc.py:2714:    stmts                          shift and go to state 28
   yacc.py:2714:    exp                            shift and go to state 4
   yacc.py:2714:    def_stmt                       shift and go to state 5
   yacc.py:2714:    print_stmt                     shift and go to state 6
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 4
   yacc.py:2563:
   yacc.py:2565:    (5) stmt -> exp .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 5 (stmt -> exp .)
   yacc.py:2687:    NUMBER          reduce using rule 5 (stmt -> exp .)
   yacc.py:2687:    (               reduce using rule 5 (stmt -> exp .)
   yacc.py:2687:    ID              reduce using rule 5 (stmt -> exp .)
   yacc.py:2687:    $end            reduce using rule 5 (stmt -> exp .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 5
   yacc.py:2563:
   yacc.py:2565:    (6) stmt -> def_stmt .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 6 (stmt -> def_stmt .)
   yacc.py:2687:    NUMBER          reduce using rule 6 (stmt -> def_stmt .)
   yacc.py:2687:    (               reduce using rule 6 (stmt -> def_stmt .)
   yacc.py:2687:    ID              reduce using rule 6 (stmt -> def_stmt .)
   yacc.py:2687:    $end            reduce using rule 6 (stmt -> def_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 6
   yacc.py:2563:
   yacc.py:2565:    (7) stmt -> print_stmt .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 7 (stmt -> print_stmt .)
   yacc.py:2687:    NUMBER          reduce using rule 7 (stmt -> print_stmt .)
   yacc.py:2687:    (               reduce using rule 7 (stmt -> print_stmt .)
   yacc.py:2687:    ID              reduce using rule 7 (stmt -> print_stmt .)
   yacc.py:2687:    $end            reduce using rule 7 (stmt -> print_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 7
   yacc.py:2563:
   yacc.py:2565:    (12) exp -> BOOL_VAL .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 12 (exp -> BOOL_VAL .)
   yacc.py:2687:    NUMBER          reduce using rule 12 (exp -> BOOL_VAL .)
   yacc.py:2687:    (               reduce using rule 12 (exp -> BOOL_VAL .)
   yacc.py:2687:    ID              reduce using rule 12 (exp -> BOOL_VAL .)
   yacc.py:2687:    $end            reduce using rule 12 (exp -> BOOL_VAL .)
   yacc.py:2687:    )               reduce using rule 12 (exp -> BOOL_VAL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 8
   yacc.py:2563:
   yacc.py:2565:    (13) exp -> NUMBER .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 13 (exp -> NUMBER .)
   yacc.py:2687:    NUMBER          reduce using rule 13 (exp -> NUMBER .)
   yacc.py:2687:    (               reduce using rule 13 (exp -> NUMBER .)
   yacc.py:2687:    ID              reduce using rule 13 (exp -> NUMBER .)
   yacc.py:2687:    $end            reduce using rule 13 (exp -> NUMBER .)
   yacc.py:2687:    )               reduce using rule 13 (exp -> NUMBER .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 9
   yacc.py:2563:
   yacc.py:2565:    (14) exp -> variable .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 14 (exp -> variable .)
   yacc.py:2687:    NUMBER          reduce using rule 14 (exp -> variable .)
   yacc.py:2687:    (               reduce using rule 14 (exp -> variable .)
   yacc.py:2687:    ID              reduce using rule 14 (exp -> variable .)
   yacc.py:2687:    $end            reduce using rule 14 (exp -> variable .)
   yacc.py:2687:    )               reduce using rule 14 (exp -> variable .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 10
   yacc.py:2563:
   yacc.py:2565:    (15) exp -> num_op .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 15 (exp -> num_op .)
   yacc.py:2687:    NUMBER          reduce using rule 15 (exp -> num_op .)
   yacc.py:2687:    (               reduce using rule 15 (exp -> num_op .)
   yacc.py:2687:    ID              reduce using rule 15 (exp -> num_op .)
   yacc.py:2687:    $end            reduce using rule 15 (exp -> num_op .)
   yacc.py:2687:    )               reduce using rule 15 (exp -> num_op .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 11
   yacc.py:2563:
   yacc.py:2565:    (16) exp -> logical_op .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 16 (exp -> logical_op .)
   yacc.py:2687:    NUMBER          reduce using rule 16 (exp -> logical_op .)
   yacc.py:2687:    (               reduce using rule 16 (exp -> logical_op .)
   yacc.py:2687:    ID              reduce using rule 16 (exp -> logical_op .)
   yacc.py:2687:    $end            reduce using rule 16 (exp -> logical_op .)
   yacc.py:2687:    )               reduce using rule 16 (exp -> logical_op .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 12
   yacc.py:2563:
   yacc.py:2565:    (17) exp -> fun_exp .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 17 (exp -> fun_exp .)
   yacc.py:2687:    NUMBER          reduce using rule 17 (exp -> fun_exp .)
   yacc.py:2687:    (               reduce using rule 17 (exp -> fun_exp .)
   yacc.py:2687:    ID              reduce using rule 17 (exp -> fun_exp .)
   yacc.py:2687:    $end            reduce using rule 17 (exp -> fun_exp .)
   yacc.py:2687:    )               reduce using rule 17 (exp -> fun_exp .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 13
   yacc.py:2563:
   yacc.py:2565:    (18) exp -> fun_call .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 18 (exp -> fun_call .)
   yacc.py:2687:    NUMBER          reduce using rule 18 (exp -> fun_call .)
   yacc.py:2687:    (               reduce using rule 18 (exp -> fun_call .)
   yacc.py:2687:    ID              reduce using rule 18 (exp -> fun_call .)
   yacc.py:2687:    $end            reduce using rule 18 (exp -> fun_call .)
   yacc.py:2687:    )               reduce using rule 18 (exp -> fun_call .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 14
   yacc.py:2563:
   yacc.py:2565:    (19) exp -> if_exp .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 19 (exp -> if_exp .)
   yacc.py:2687:    NUMBER          reduce using rule 19 (exp -> if_exp .)
   yacc.py:2687:    (               reduce using rule 19 (exp -> if_exp .)
   yacc.py:2687:    ID              reduce using rule 19 (exp -> if_exp .)
   yacc.py:2687:    $end            reduce using rule 19 (exp -> if_exp .)
   yacc.py:2687:    )               reduce using rule 19 (exp -> if_exp .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 15
   yacc.py:2563:
   yacc.py:2565:    (42) def_stmt -> ( . DEFINE variable exp )
   yacc.py:2565:    (8) print_stmt -> ( . PRINT_NUM exp )
   yacc.py:2565:    (9) print_stmt -> ( . PRINT_BOOL exp )
   yacc.py:2565:    (45) fun_exp -> ( . FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> ( . fun_exp params )
   yacc.py:2565:    (51) fun_call -> ( . fun_name params )
   yacc.py:2565:    (57) if_exp -> ( . IF exp exp exp )
   yacc.py:2565:    (28) plus -> ( . + exp exps )
   yacc.py:2565:    (29) minus -> ( . - exp exp )
   yacc.py:2565:    (30) multiply -> ( . * exp exps )
   yacc.py:2565:    (31) divide -> ( . / exp exp )
   yacc.py:2565:    (32) modulus -> ( . MODULUS exp exp )
   yacc.py:2565:    (33) greater -> ( . > exp exp )
   yacc.py:2565:    (34) smaller -> ( . < exp exp )
   yacc.py:2565:    (35) equal -> ( . = exp exps )
   yacc.py:2565:    (39) and_op -> ( . AND exp exps )
   yacc.py:2565:    (40) or_op -> ( . OR exp exps )
   yacc.py:2565:    (41) not_op -> ( . NOT exp )
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (56) fun_name -> . ID
   yacc.py:2566:
   yacc.py:2687:    DEFINE          shift and go to state 30
   yacc.py:2687:    PRINT_NUM       shift and go to state 31
   yacc.py:2687:    PRINT_BOOL      shift and go to state 32
   yacc.py:2687:    FUN             shift and go to state 33
   yacc.py:2687:    IF              shift and go to state 36
   yacc.py:2687:    +               shift and go to state 37
   yacc.py:2687:    -               shift and go to state 38
   yacc.py:2687:    *               shift and go to state 39
   yacc.py:2687:    /               shift and go to state 40
   yacc.py:2687:    MODULUS         shift and go to state 41
   yacc.py:2687:    >               shift and go to state 42
   yacc.py:2687:    <               shift and go to state 43
   yacc.py:2687:    =               shift and go to state 44
   yacc.py:2687:    AND             shift and go to state 45
   yacc.py:2687:    OR              shift and go to state 46
   yacc.py:2687:    NOT             shift and go to state 47
   yacc.py:2687:    (               shift and go to state 29
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2689:
   yacc.py:2714:    fun_exp                        shift and go to state 34
   yacc.py:2714:    fun_name                       shift and go to state 35
   yacc.py:2561:
   yacc.py:2562:state 16
   yacc.py:2563:
   yacc.py:2565:    (55) variable -> ID .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 55 (variable -> ID .)
   yacc.py:2687:    NUMBER          reduce using rule 55 (variable -> ID .)
   yacc.py:2687:    (               reduce using rule 55 (variable -> ID .)
   yacc.py:2687:    ID              reduce using rule 55 (variable -> ID .)
   yacc.py:2687:    $end            reduce using rule 55 (variable -> ID .)
   yacc.py:2687:    )               reduce using rule 55 (variable -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 17
   yacc.py:2563:
   yacc.py:2565:    (20) num_op -> plus .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 20 (num_op -> plus .)
   yacc.py:2687:    NUMBER          reduce using rule 20 (num_op -> plus .)
   yacc.py:2687:    (               reduce using rule 20 (num_op -> plus .)
   yacc.py:2687:    ID              reduce using rule 20 (num_op -> plus .)
   yacc.py:2687:    $end            reduce using rule 20 (num_op -> plus .)
   yacc.py:2687:    )               reduce using rule 20 (num_op -> plus .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 18
   yacc.py:2563:
   yacc.py:2565:    (21) num_op -> minus .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 21 (num_op -> minus .)
   yacc.py:2687:    NUMBER          reduce using rule 21 (num_op -> minus .)
   yacc.py:2687:    (               reduce using rule 21 (num_op -> minus .)
   yacc.py:2687:    ID              reduce using rule 21 (num_op -> minus .)
   yacc.py:2687:    $end            reduce using rule 21 (num_op -> minus .)
   yacc.py:2687:    )               reduce using rule 21 (num_op -> minus .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 19
   yacc.py:2563:
   yacc.py:2565:    (22) num_op -> multiply .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 22 (num_op -> multiply .)
   yacc.py:2687:    NUMBER          reduce using rule 22 (num_op -> multiply .)
   yacc.py:2687:    (               reduce using rule 22 (num_op -> multiply .)
   yacc.py:2687:    ID              reduce using rule 22 (num_op -> multiply .)
   yacc.py:2687:    $end            reduce using rule 22 (num_op -> multiply .)
   yacc.py:2687:    )               reduce using rule 22 (num_op -> multiply .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 20
   yacc.py:2563:
   yacc.py:2565:    (23) num_op -> divide .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 23 (num_op -> divide .)
   yacc.py:2687:    NUMBER          reduce using rule 23 (num_op -> divide .)
   yacc.py:2687:    (               reduce using rule 23 (num_op -> divide .)
   yacc.py:2687:    ID              reduce using rule 23 (num_op -> divide .)
   yacc.py:2687:    $end            reduce using rule 23 (num_op -> divide .)
   yacc.py:2687:    )               reduce using rule 23 (num_op -> divide .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 21
   yacc.py:2563:
   yacc.py:2565:    (24) num_op -> modulus .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 24 (num_op -> modulus .)
   yacc.py:2687:    NUMBER          reduce using rule 24 (num_op -> modulus .)
   yacc.py:2687:    (               reduce using rule 24 (num_op -> modulus .)
   yacc.py:2687:    ID              reduce using rule 24 (num_op -> modulus .)
   yacc.py:2687:    $end            reduce using rule 24 (num_op -> modulus .)
   yacc.py:2687:    )               reduce using rule 24 (num_op -> modulus .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 22
   yacc.py:2563:
   yacc.py:2565:    (25) num_op -> greater .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 25 (num_op -> greater .)
   yacc.py:2687:    NUMBER          reduce using rule 25 (num_op -> greater .)
   yacc.py:2687:    (               reduce using rule 25 (num_op -> greater .)
   yacc.py:2687:    ID              reduce using rule 25 (num_op -> greater .)
   yacc.py:2687:    $end            reduce using rule 25 (num_op -> greater .)
   yacc.py:2687:    )               reduce using rule 25 (num_op -> greater .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 23
   yacc.py:2563:
   yacc.py:2565:    (26) num_op -> smaller .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 26 (num_op -> smaller .)
   yacc.py:2687:    NUMBER          reduce using rule 26 (num_op -> smaller .)
   yacc.py:2687:    (               reduce using rule 26 (num_op -> smaller .)
   yacc.py:2687:    ID              reduce using rule 26 (num_op -> smaller .)
   yacc.py:2687:    $end            reduce using rule 26 (num_op -> smaller .)
   yacc.py:2687:    )               reduce using rule 26 (num_op -> smaller .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 24
   yacc.py:2563:
   yacc.py:2565:    (27) num_op -> equal .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 27 (num_op -> equal .)
   yacc.py:2687:    NUMBER          reduce using rule 27 (num_op -> equal .)
   yacc.py:2687:    (               reduce using rule 27 (num_op -> equal .)
   yacc.py:2687:    ID              reduce using rule 27 (num_op -> equal .)
   yacc.py:2687:    $end            reduce using rule 27 (num_op -> equal .)
   yacc.py:2687:    )               reduce using rule 27 (num_op -> equal .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 25
   yacc.py:2563:
   yacc.py:2565:    (36) logical_op -> and_op .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 36 (logical_op -> and_op .)
   yacc.py:2687:    NUMBER          reduce using rule 36 (logical_op -> and_op .)
   yacc.py:2687:    (               reduce using rule 36 (logical_op -> and_op .)
   yacc.py:2687:    ID              reduce using rule 36 (logical_op -> and_op .)
   yacc.py:2687:    $end            reduce using rule 36 (logical_op -> and_op .)
   yacc.py:2687:    )               reduce using rule 36 (logical_op -> and_op .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 26
   yacc.py:2563:
   yacc.py:2565:    (37) logical_op -> or_op .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 37 (logical_op -> or_op .)
   yacc.py:2687:    NUMBER          reduce using rule 37 (logical_op -> or_op .)
   yacc.py:2687:    (               reduce using rule 37 (logical_op -> or_op .)
   yacc.py:2687:    ID              reduce using rule 37 (logical_op -> or_op .)
   yacc.py:2687:    $end            reduce using rule 37 (logical_op -> or_op .)
   yacc.py:2687:    )               reduce using rule 37 (logical_op -> or_op .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 27
   yacc.py:2563:
   yacc.py:2565:    (38) logical_op -> not_op .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 38 (logical_op -> not_op .)
   yacc.py:2687:    NUMBER          reduce using rule 38 (logical_op -> not_op .)
   yacc.py:2687:    (               reduce using rule 38 (logical_op -> not_op .)
   yacc.py:2687:    ID              reduce using rule 38 (logical_op -> not_op .)
   yacc.py:2687:    $end            reduce using rule 38 (logical_op -> not_op .)
   yacc.py:2687:    )               reduce using rule 38 (logical_op -> not_op .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 28
   yacc.py:2563:
   yacc.py:2565:    (3) stmts -> stmt stmts .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 3 (stmts -> stmt stmts .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 29
   yacc.py:2563:
   yacc.py:2565:    (45) fun_exp -> ( . FUN fun_ids fun_body )
   yacc.py:2566:
   yacc.py:2687:    FUN             shift and go to state 33
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 30
   yacc.py:2563:
   yacc.py:2565:    (42) def_stmt -> ( DEFINE . variable exp )
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2689:
   yacc.py:2714:    variable                       shift and go to state 49
   yacc.py:2561:
   yacc.py:2562:state 31
   yacc.py:2563:
   yacc.py:2565:    (8) print_stmt -> ( PRINT_NUM . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 51
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 32
   yacc.py:2563:
   yacc.py:2565:    (9) print_stmt -> ( PRINT_BOOL . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 52
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 33
   yacc.py:2563:
   yacc.py:2565:    (45) fun_exp -> ( FUN . fun_ids fun_body )
   yacc.py:2565:    (47) fun_ids -> . ( ids )
   yacc.py:2566:
   yacc.py:2687:    (               shift and go to state 53
   yacc.py:2689:
   yacc.py:2714:    fun_ids                        shift and go to state 54
   yacc.py:2561:
   yacc.py:2562:state 34
   yacc.py:2563:
   yacc.py:2565:    (50) fun_call -> ( fun_exp . params )
   yacc.py:2565:    (52) params -> . param params
   yacc.py:2565:    (53) params -> . empty
   yacc.py:2565:    (54) param -> . exp
   yacc.py:2565:    (1) empty -> .
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 1 (empty -> .)
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    params                         shift and go to state 55
   yacc.py:2714:    param                          shift and go to state 56
   yacc.py:2714:    empty                          shift and go to state 57
   yacc.py:2714:    exp                            shift and go to state 58
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 35
   yacc.py:2563:
   yacc.py:2565:    (51) fun_call -> ( fun_name . params )
   yacc.py:2565:    (52) params -> . param params
   yacc.py:2565:    (53) params -> . empty
   yacc.py:2565:    (54) param -> . exp
   yacc.py:2565:    (1) empty -> .
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 1 (empty -> .)
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    params                         shift and go to state 59
   yacc.py:2714:    param                          shift and go to state 56
   yacc.py:2714:    empty                          shift and go to state 57
   yacc.py:2714:    exp                            shift and go to state 58
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 36
   yacc.py:2563:
   yacc.py:2565:    (57) if_exp -> ( IF . exp exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 60
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 37
   yacc.py:2563:
   yacc.py:2565:    (28) plus -> ( + . exp exps )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 61
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 38
   yacc.py:2563:
   yacc.py:2565:    (29) minus -> ( - . exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 62
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 39
   yacc.py:2563:
   yacc.py:2565:    (30) multiply -> ( * . exp exps )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 63
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 40
   yacc.py:2563:
   yacc.py:2565:    (31) divide -> ( / . exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 64
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 41
   yacc.py:2563:
   yacc.py:2565:    (32) modulus -> ( MODULUS . exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 65
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 42
   yacc.py:2563:
   yacc.py:2565:    (33) greater -> ( > . exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 66
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 43
   yacc.py:2563:
   yacc.py:2565:    (34) smaller -> ( < . exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 67
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 44
   yacc.py:2563:
   yacc.py:2565:    (35) equal -> ( = . exp exps )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 68
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 45
   yacc.py:2563:
   yacc.py:2565:    (39) and_op -> ( AND . exp exps )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 69
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 46
   yacc.py:2563:
   yacc.py:2565:    (40) or_op -> ( OR . exp exps )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 70
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 47
   yacc.py:2563:
   yacc.py:2565:    (41) not_op -> ( NOT . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 71
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 48
   yacc.py:2563:
   yacc.py:2565:    (56) fun_name -> ID .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 56 (fun_name -> ID .)
   yacc.py:2687:    NUMBER          reduce using rule 56 (fun_name -> ID .)
   yacc.py:2687:    ID              reduce using rule 56 (fun_name -> ID .)
   yacc.py:2687:    (               reduce using rule 56 (fun_name -> ID .)
   yacc.py:2687:    )               reduce using rule 56 (fun_name -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 49
   yacc.py:2563:
   yacc.py:2565:    (42) def_stmt -> ( DEFINE variable . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    exp                            shift and go to state 72
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 50
   yacc.py:2563:
   yacc.py:2565:    (45) fun_exp -> ( . FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> ( . fun_exp params )
   yacc.py:2565:    (51) fun_call -> ( . fun_name params )
   yacc.py:2565:    (57) if_exp -> ( . IF exp exp exp )
   yacc.py:2565:    (28) plus -> ( . + exp exps )
   yacc.py:2565:    (29) minus -> ( . - exp exp )
   yacc.py:2565:    (30) multiply -> ( . * exp exps )
   yacc.py:2565:    (31) divide -> ( . / exp exp )
   yacc.py:2565:    (32) modulus -> ( . MODULUS exp exp )
   yacc.py:2565:    (33) greater -> ( . > exp exp )
   yacc.py:2565:    (34) smaller -> ( . < exp exp )
   yacc.py:2565:    (35) equal -> ( . = exp exps )
   yacc.py:2565:    (39) and_op -> ( . AND exp exps )
   yacc.py:2565:    (40) or_op -> ( . OR exp exps )
   yacc.py:2565:    (41) not_op -> ( . NOT exp )
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (56) fun_name -> . ID
   yacc.py:2566:
   yacc.py:2687:    FUN             shift and go to state 33
   yacc.py:2687:    IF              shift and go to state 36
   yacc.py:2687:    +               shift and go to state 37
   yacc.py:2687:    -               shift and go to state 38
   yacc.py:2687:    *               shift and go to state 39
   yacc.py:2687:    /               shift and go to state 40
   yacc.py:2687:    MODULUS         shift and go to state 41
   yacc.py:2687:    >               shift and go to state 42
   yacc.py:2687:    <               shift and go to state 43
   yacc.py:2687:    =               shift and go to state 44
   yacc.py:2687:    AND             shift and go to state 45
   yacc.py:2687:    OR              shift and go to state 46
   yacc.py:2687:    NOT             shift and go to state 47
   yacc.py:2687:    (               shift and go to state 29
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2689:
   yacc.py:2714:    fun_exp                        shift and go to state 34
   yacc.py:2714:    fun_name                       shift and go to state 35
   yacc.py:2561:
   yacc.py:2562:state 51
   yacc.py:2563:
   yacc.py:2565:    (8) print_stmt -> ( PRINT_NUM exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 73
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 52
   yacc.py:2563:
   yacc.py:2565:    (9) print_stmt -> ( PRINT_BOOL exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 74
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 53
   yacc.py:2563:
   yacc.py:2565:    (47) fun_ids -> ( . ids )
   yacc.py:2565:    (48) ids -> . ID ids
   yacc.py:2565:    (49) ids -> . empty
   yacc.py:2565:    (1) empty -> .
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 76
   yacc.py:2687:    )               reduce using rule 1 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    ids                            shift and go to state 75
   yacc.py:2714:    empty                          shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 54
   yacc.py:2563:
   yacc.py:2565:    (45) fun_exp -> ( FUN fun_ids . fun_body )
   yacc.py:2565:    (46) fun_body -> . def_stmts exp
   yacc.py:2565:    (43) def_stmts -> . empty
   yacc.py:2565:    (44) def_stmts -> . def_stmts def_stmt
   yacc.py:2565:    (1) empty -> .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 1 (empty -> .)
   yacc.py:2687:    NUMBER          reduce using rule 1 (empty -> .)
   yacc.py:2687:    (               reduce using rule 1 (empty -> .)
   yacc.py:2687:    ID              reduce using rule 1 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    fun_body                       shift and go to state 78
   yacc.py:2714:    def_stmts                      shift and go to state 79
   yacc.py:2714:    empty                          shift and go to state 80
   yacc.py:2561:
   yacc.py:2562:state 55
   yacc.py:2563:
   yacc.py:2565:    (50) fun_call -> ( fun_exp params . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 81
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 56
   yacc.py:2563:
   yacc.py:2565:    (52) params -> param . params
   yacc.py:2565:    (52) params -> . param params
   yacc.py:2565:    (53) params -> . empty
   yacc.py:2565:    (54) param -> . exp
   yacc.py:2565:    (1) empty -> .
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 1 (empty -> .)
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    param                          shift and go to state 56
   yacc.py:2714:    params                         shift and go to state 82
   yacc.py:2714:    empty                          shift and go to state 57
   yacc.py:2714:    exp                            shift and go to state 58
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 57
   yacc.py:2563:
   yacc.py:2565:    (53) params -> empty .
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 53 (params -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 58
   yacc.py:2563:
   yacc.py:2565:    (54) param -> exp .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 54 (param -> exp .)
   yacc.py:2687:    NUMBER          reduce using rule 54 (param -> exp .)
   yacc.py:2687:    ID              reduce using rule 54 (param -> exp .)
   yacc.py:2687:    (               reduce using rule 54 (param -> exp .)
   yacc.py:2687:    )               reduce using rule 54 (param -> exp .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 59
   yacc.py:2563:
   yacc.py:2565:    (51) fun_call -> ( fun_name params . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 83
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 60
   yacc.py:2563:
   yacc.py:2565:    (57) if_exp -> ( IF exp . exp exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 84
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 61
   yacc.py:2563:
   yacc.py:2565:    (28) plus -> ( + exp . exps )
   yacc.py:2565:    (10) exps -> . exp exps
   yacc.py:2565:    (11) exps -> . exp
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 85
   yacc.py:2714:    exps                           shift and go to state 86
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 62
   yacc.py:2563:
   yacc.py:2565:    (29) minus -> ( - exp . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 87
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 63
   yacc.py:2563:
   yacc.py:2565:    (30) multiply -> ( * exp . exps )
   yacc.py:2565:    (10) exps -> . exp exps
   yacc.py:2565:    (11) exps -> . exp
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 85
   yacc.py:2714:    exps                           shift and go to state 88
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 64
   yacc.py:2563:
   yacc.py:2565:    (31) divide -> ( / exp . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 89
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 65
   yacc.py:2563:
   yacc.py:2565:    (32) modulus -> ( MODULUS exp . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 90
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 66
   yacc.py:2563:
   yacc.py:2565:    (33) greater -> ( > exp . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 91
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 67
   yacc.py:2563:
   yacc.py:2565:    (34) smaller -> ( < exp . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 92
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 68
   yacc.py:2563:
   yacc.py:2565:    (35) equal -> ( = exp . exps )
   yacc.py:2565:    (10) exps -> . exp exps
   yacc.py:2565:    (11) exps -> . exp
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 85
   yacc.py:2714:    exps                           shift and go to state 93
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 69
   yacc.py:2563:
   yacc.py:2565:    (39) and_op -> ( AND exp . exps )
   yacc.py:2565:    (10) exps -> . exp exps
   yacc.py:2565:    (11) exps -> . exp
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 85
   yacc.py:2714:    exps                           shift and go to state 94
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 70
   yacc.py:2563:
   yacc.py:2565:    (40) or_op -> ( OR exp . exps )
   yacc.py:2565:    (10) exps -> . exp exps
   yacc.py:2565:    (11) exps -> . exp
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 85
   yacc.py:2714:    exps                           shift and go to state 95
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 71
   yacc.py:2563:
   yacc.py:2565:    (41) not_op -> ( NOT exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 96
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 72
   yacc.py:2563:
   yacc.py:2565:    (42) def_stmt -> ( DEFINE variable exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 97
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 73
   yacc.py:2563:
   yacc.py:2565:    (8) print_stmt -> ( PRINT_NUM exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
   yacc.py:2687:    (               reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
   yacc.py:2687:    ID              reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
   yacc.py:2687:    $end            reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 74
   yacc.py:2563:
   yacc.py:2565:    (9) print_stmt -> ( PRINT_BOOL exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
   yacc.py:2687:    (               reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
   yacc.py:2687:    ID              reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
   yacc.py:2687:    $end            reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 75
   yacc.py:2563:
   yacc.py:2565:    (47) fun_ids -> ( ids . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 98
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 76
   yacc.py:2563:
   yacc.py:2565:    (48) ids -> ID . ids
   yacc.py:2565:    (48) ids -> . ID ids
   yacc.py:2565:    (49) ids -> . empty
   yacc.py:2565:    (1) empty -> .
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 76
   yacc.py:2687:    )               reduce using rule 1 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    ids                            shift and go to state 99
   yacc.py:2714:    empty                          shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 77
   yacc.py:2563:
   yacc.py:2565:    (49) ids -> empty .
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 49 (ids -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 78
   yacc.py:2563:
   yacc.py:2565:    (45) fun_exp -> ( FUN fun_ids fun_body . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 100
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 79
   yacc.py:2563:
   yacc.py:2565:    (46) fun_body -> def_stmts . exp
   yacc.py:2565:    (44) def_stmts -> def_stmts . def_stmt
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (42) def_stmt -> . ( DEFINE variable exp )
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    (               shift and go to state 103
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 101
   yacc.py:2714:    def_stmt                       shift and go to state 102
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 80
   yacc.py:2563:
   yacc.py:2565:    (43) def_stmts -> empty .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 43 (def_stmts -> empty .)
   yacc.py:2687:    NUMBER          reduce using rule 43 (def_stmts -> empty .)
   yacc.py:2687:    (               reduce using rule 43 (def_stmts -> empty .)
   yacc.py:2687:    ID              reduce using rule 43 (def_stmts -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 81
   yacc.py:2563:
   yacc.py:2565:    (50) fun_call -> ( fun_exp params ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 50 (fun_call -> ( fun_exp params ) .)
   yacc.py:2687:    NUMBER          reduce using rule 50 (fun_call -> ( fun_exp params ) .)
   yacc.py:2687:    (               reduce using rule 50 (fun_call -> ( fun_exp params ) .)
   yacc.py:2687:    ID              reduce using rule 50 (fun_call -> ( fun_exp params ) .)
   yacc.py:2687:    $end            reduce using rule 50 (fun_call -> ( fun_exp params ) .)
   yacc.py:2687:    )               reduce using rule 50 (fun_call -> ( fun_exp params ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 82
   yacc.py:2563:
   yacc.py:2565:    (52) params -> param params .
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 52 (params -> param params .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 83
   yacc.py:2563:
   yacc.py:2565:    (51) fun_call -> ( fun_name params ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 51 (fun_call -> ( fun_name params ) .)
   yacc.py:2687:    NUMBER          reduce using rule 51 (fun_call -> ( fun_name params ) .)
   yacc.py:2687:    (               reduce using rule 51 (fun_call -> ( fun_name params ) .)
   yacc.py:2687:    ID              reduce using rule 51 (fun_call -> ( fun_name params ) .)
   yacc.py:2687:    $end            reduce using rule 51 (fun_call -> ( fun_name params ) .)
   yacc.py:2687:    )               reduce using rule 51 (fun_call -> ( fun_name params ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 84
   yacc.py:2563:
   yacc.py:2565:    (57) if_exp -> ( IF exp exp . exp )
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 104
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 85
   yacc.py:2563:
   yacc.py:2565:    (10) exps -> exp . exps
   yacc.py:2565:    (11) exps -> exp .
   yacc.py:2565:    (10) exps -> . exp exps
   yacc.py:2565:    (11) exps -> . exp
   yacc.py:2565:    (12) exp -> . BOOL_VAL
   yacc.py:2565:    (13) exp -> . NUMBER
   yacc.py:2565:    (14) exp -> . variable
   yacc.py:2565:    (15) exp -> . num_op
   yacc.py:2565:    (16) exp -> . logical_op
   yacc.py:2565:    (17) exp -> . fun_exp
   yacc.py:2565:    (18) exp -> . fun_call
   yacc.py:2565:    (19) exp -> . if_exp
   yacc.py:2565:    (55) variable -> . ID
   yacc.py:2565:    (20) num_op -> . plus
   yacc.py:2565:    (21) num_op -> . minus
   yacc.py:2565:    (22) num_op -> . multiply
   yacc.py:2565:    (23) num_op -> . divide
   yacc.py:2565:    (24) num_op -> . modulus
   yacc.py:2565:    (25) num_op -> . greater
   yacc.py:2565:    (26) num_op -> . smaller
   yacc.py:2565:    (27) num_op -> . equal
   yacc.py:2565:    (36) logical_op -> . and_op
   yacc.py:2565:    (37) logical_op -> . or_op
   yacc.py:2565:    (38) logical_op -> . not_op
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> . ( fun_exp params )
   yacc.py:2565:    (51) fun_call -> . ( fun_name params )
   yacc.py:2565:    (57) if_exp -> . ( IF exp exp exp )
   yacc.py:2565:    (28) plus -> . ( + exp exps )
   yacc.py:2565:    (29) minus -> . ( - exp exp )
   yacc.py:2565:    (30) multiply -> . ( * exp exps )
   yacc.py:2565:    (31) divide -> . ( / exp exp )
   yacc.py:2565:    (32) modulus -> . ( MODULUS exp exp )
   yacc.py:2565:    (33) greater -> . ( > exp exp )
   yacc.py:2565:    (34) smaller -> . ( < exp exp )
   yacc.py:2565:    (35) equal -> . ( = exp exps )
   yacc.py:2565:    (39) and_op -> . ( AND exp exps )
   yacc.py:2565:    (40) or_op -> . ( OR exp exps )
   yacc.py:2565:    (41) not_op -> . ( NOT exp )
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 11 (exps -> exp .)
   yacc.py:2687:    BOOL_VAL        shift and go to state 7
   yacc.py:2687:    NUMBER          shift and go to state 8
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2687:    (               shift and go to state 50
   yacc.py:2689:
   yacc.py:2714:    exp                            shift and go to state 85
   yacc.py:2714:    exps                           shift and go to state 105
   yacc.py:2714:    variable                       shift and go to state 9
   yacc.py:2714:    num_op                         shift and go to state 10
   yacc.py:2714:    logical_op                     shift and go to state 11
   yacc.py:2714:    fun_exp                        shift and go to state 12
   yacc.py:2714:    fun_call                       shift and go to state 13
   yacc.py:2714:    if_exp                         shift and go to state 14
   yacc.py:2714:    plus                           shift and go to state 17
   yacc.py:2714:    minus                          shift and go to state 18
   yacc.py:2714:    multiply                       shift and go to state 19
   yacc.py:2714:    divide                         shift and go to state 20
   yacc.py:2714:    modulus                        shift and go to state 21
   yacc.py:2714:    greater                        shift and go to state 22
   yacc.py:2714:    smaller                        shift and go to state 23
   yacc.py:2714:    equal                          shift and go to state 24
   yacc.py:2714:    and_op                         shift and go to state 25
   yacc.py:2714:    or_op                          shift and go to state 26
   yacc.py:2714:    not_op                         shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 86
   yacc.py:2563:
   yacc.py:2565:    (28) plus -> ( + exp exps . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 106
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 87
   yacc.py:2563:
   yacc.py:2565:    (29) minus -> ( - exp exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 107
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 88
   yacc.py:2563:
   yacc.py:2565:    (30) multiply -> ( * exp exps . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 108
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 89
   yacc.py:2563:
   yacc.py:2565:    (31) divide -> ( / exp exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 109
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 90
   yacc.py:2563:
   yacc.py:2565:    (32) modulus -> ( MODULUS exp exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 110
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 91
   yacc.py:2563:
   yacc.py:2565:    (33) greater -> ( > exp exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 111
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 92
   yacc.py:2563:
   yacc.py:2565:    (34) smaller -> ( < exp exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 112
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 93
   yacc.py:2563:
   yacc.py:2565:    (35) equal -> ( = exp exps . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 113
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 94
   yacc.py:2563:
   yacc.py:2565:    (39) and_op -> ( AND exp exps . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 114
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 95
   yacc.py:2563:
   yacc.py:2565:    (40) or_op -> ( OR exp exps . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 115
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 96
   yacc.py:2563:
   yacc.py:2565:    (41) not_op -> ( NOT exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 41 (not_op -> ( NOT exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 41 (not_op -> ( NOT exp ) .)
   yacc.py:2687:    (               reduce using rule 41 (not_op -> ( NOT exp ) .)
   yacc.py:2687:    ID              reduce using rule 41 (not_op -> ( NOT exp ) .)
   yacc.py:2687:    $end            reduce using rule 41 (not_op -> ( NOT exp ) .)
   yacc.py:2687:    )               reduce using rule 41 (not_op -> ( NOT exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 97
   yacc.py:2563:
   yacc.py:2565:    (42) def_stmt -> ( DEFINE variable exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 42 (def_stmt -> ( DEFINE variable exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 42 (def_stmt -> ( DEFINE variable exp ) .)
   yacc.py:2687:    (               reduce using rule 42 (def_stmt -> ( DEFINE variable exp ) .)
   yacc.py:2687:    ID              reduce using rule 42 (def_stmt -> ( DEFINE variable exp ) .)
   yacc.py:2687:    $end            reduce using rule 42 (def_stmt -> ( DEFINE variable exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 98
   yacc.py:2563:
   yacc.py:2565:    (47) fun_ids -> ( ids ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 47 (fun_ids -> ( ids ) .)
   yacc.py:2687:    NUMBER          reduce using rule 47 (fun_ids -> ( ids ) .)
   yacc.py:2687:    (               reduce using rule 47 (fun_ids -> ( ids ) .)
   yacc.py:2687:    ID              reduce using rule 47 (fun_ids -> ( ids ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 99
   yacc.py:2563:
   yacc.py:2565:    (48) ids -> ID ids .
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 48 (ids -> ID ids .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 100
   yacc.py:2563:
   yacc.py:2565:    (45) fun_exp -> ( FUN fun_ids fun_body ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 45 (fun_exp -> ( FUN fun_ids fun_body ) .)
   yacc.py:2687:    NUMBER          reduce using rule 45 (fun_exp -> ( FUN fun_ids fun_body ) .)
   yacc.py:2687:    (               reduce using rule 45 (fun_exp -> ( FUN fun_ids fun_body ) .)
   yacc.py:2687:    ID              reduce using rule 45 (fun_exp -> ( FUN fun_ids fun_body ) .)
   yacc.py:2687:    $end            reduce using rule 45 (fun_exp -> ( FUN fun_ids fun_body ) .)
   yacc.py:2687:    )               reduce using rule 45 (fun_exp -> ( FUN fun_ids fun_body ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 101
   yacc.py:2563:
   yacc.py:2565:    (46) fun_body -> def_stmts exp .
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 46 (fun_body -> def_stmts exp .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 102
   yacc.py:2563:
   yacc.py:2565:    (44) def_stmts -> def_stmts def_stmt .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 44 (def_stmts -> def_stmts def_stmt .)
   yacc.py:2687:    NUMBER          reduce using rule 44 (def_stmts -> def_stmts def_stmt .)
   yacc.py:2687:    (               reduce using rule 44 (def_stmts -> def_stmts def_stmt .)
   yacc.py:2687:    ID              reduce using rule 44 (def_stmts -> def_stmts def_stmt .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 103
   yacc.py:2563:
   yacc.py:2565:    (42) def_stmt -> ( . DEFINE variable exp )
   yacc.py:2565:    (45) fun_exp -> ( . FUN fun_ids fun_body )
   yacc.py:2565:    (50) fun_call -> ( . fun_exp params )
   yacc.py:2565:    (51) fun_call -> ( . fun_name params )
   yacc.py:2565:    (57) if_exp -> ( . IF exp exp exp )
   yacc.py:2565:    (28) plus -> ( . + exp exps )
   yacc.py:2565:    (29) minus -> ( . - exp exp )
   yacc.py:2565:    (30) multiply -> ( . * exp exps )
   yacc.py:2565:    (31) divide -> ( . / exp exp )
   yacc.py:2565:    (32) modulus -> ( . MODULUS exp exp )
   yacc.py:2565:    (33) greater -> ( . > exp exp )
   yacc.py:2565:    (34) smaller -> ( . < exp exp )
   yacc.py:2565:    (35) equal -> ( . = exp exps )
   yacc.py:2565:    (39) and_op -> ( . AND exp exps )
   yacc.py:2565:    (40) or_op -> ( . OR exp exps )
   yacc.py:2565:    (41) not_op -> ( . NOT exp )
   yacc.py:2565:    (45) fun_exp -> . ( FUN fun_ids fun_body )
   yacc.py:2565:    (56) fun_name -> . ID
   yacc.py:2566:
   yacc.py:2687:    DEFINE          shift and go to state 30
   yacc.py:2687:    FUN             shift and go to state 33
   yacc.py:2687:    IF              shift and go to state 36
   yacc.py:2687:    +               shift and go to state 37
   yacc.py:2687:    -               shift and go to state 38
   yacc.py:2687:    *               shift and go to state 39
   yacc.py:2687:    /               shift and go to state 40
   yacc.py:2687:    MODULUS         shift and go to state 41
   yacc.py:2687:    >               shift and go to state 42
   yacc.py:2687:    <               shift and go to state 43
   yacc.py:2687:    =               shift and go to state 44
   yacc.py:2687:    AND             shift and go to state 45
   yacc.py:2687:    OR              shift and go to state 46
   yacc.py:2687:    NOT             shift and go to state 47
   yacc.py:2687:    (               shift and go to state 29
   yacc.py:2687:    ID              shift and go to state 48
   yacc.py:2689:
   yacc.py:2714:    fun_exp                        shift and go to state 34
   yacc.py:2714:    fun_name                       shift and go to state 35
   yacc.py:2561:
   yacc.py:2562:state 104
   yacc.py:2563:
   yacc.py:2565:    (57) if_exp -> ( IF exp exp exp . )
   yacc.py:2566:
   yacc.py:2687:    )               shift and go to state 116
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 105
   yacc.py:2563:
   yacc.py:2565:    (10) exps -> exp exps .
   yacc.py:2566:
   yacc.py:2687:    )               reduce using rule 10 (exps -> exp exps .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 106
   yacc.py:2563:
   yacc.py:2565:    (28) plus -> ( + exp exps ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 28 (plus -> ( + exp exps ) .)
   yacc.py:2687:    NUMBER          reduce using rule 28 (plus -> ( + exp exps ) .)
   yacc.py:2687:    (               reduce using rule 28 (plus -> ( + exp exps ) .)
   yacc.py:2687:    ID              reduce using rule 28 (plus -> ( + exp exps ) .)
   yacc.py:2687:    $end            reduce using rule 28 (plus -> ( + exp exps ) .)
   yacc.py:2687:    )               reduce using rule 28 (plus -> ( + exp exps ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 107
   yacc.py:2563:
   yacc.py:2565:    (29) minus -> ( - exp exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 29 (minus -> ( - exp exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 29 (minus -> ( - exp exp ) .)
   yacc.py:2687:    (               reduce using rule 29 (minus -> ( - exp exp ) .)
   yacc.py:2687:    ID              reduce using rule 29 (minus -> ( - exp exp ) .)
   yacc.py:2687:    $end            reduce using rule 29 (minus -> ( - exp exp ) .)
   yacc.py:2687:    )               reduce using rule 29 (minus -> ( - exp exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 108
   yacc.py:2563:
   yacc.py:2565:    (30) multiply -> ( * exp exps ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 30 (multiply -> ( * exp exps ) .)
   yacc.py:2687:    NUMBER          reduce using rule 30 (multiply -> ( * exp exps ) .)
   yacc.py:2687:    (               reduce using rule 30 (multiply -> ( * exp exps ) .)
   yacc.py:2687:    ID              reduce using rule 30 (multiply -> ( * exp exps ) .)
   yacc.py:2687:    $end            reduce using rule 30 (multiply -> ( * exp exps ) .)
   yacc.py:2687:    )               reduce using rule 30 (multiply -> ( * exp exps ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 109
   yacc.py:2563:
   yacc.py:2565:    (31) divide -> ( / exp exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 31 (divide -> ( / exp exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 31 (divide -> ( / exp exp ) .)
   yacc.py:2687:    (               reduce using rule 31 (divide -> ( / exp exp ) .)
   yacc.py:2687:    ID              reduce using rule 31 (divide -> ( / exp exp ) .)
   yacc.py:2687:    $end            reduce using rule 31 (divide -> ( / exp exp ) .)
   yacc.py:2687:    )               reduce using rule 31 (divide -> ( / exp exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 110
   yacc.py:2563:
   yacc.py:2565:    (32) modulus -> ( MODULUS exp exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
   yacc.py:2687:    (               reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
   yacc.py:2687:    ID              reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
   yacc.py:2687:    $end            reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
   yacc.py:2687:    )               reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 111
   yacc.py:2563:
   yacc.py:2565:    (33) greater -> ( > exp exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 33 (greater -> ( > exp exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 33 (greater -> ( > exp exp ) .)
   yacc.py:2687:    (               reduce using rule 33 (greater -> ( > exp exp ) .)
   yacc.py:2687:    ID              reduce using rule 33 (greater -> ( > exp exp ) .)
   yacc.py:2687:    $end            reduce using rule 33 (greater -> ( > exp exp ) .)
   yacc.py:2687:    )               reduce using rule 33 (greater -> ( > exp exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 112
   yacc.py:2563:
   yacc.py:2565:    (34) smaller -> ( < exp exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 34 (smaller -> ( < exp exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 34 (smaller -> ( < exp exp ) .)
   yacc.py:2687:    (               reduce using rule 34 (smaller -> ( < exp exp ) .)
   yacc.py:2687:    ID              reduce using rule 34 (smaller -> ( < exp exp ) .)
   yacc.py:2687:    $end            reduce using rule 34 (smaller -> ( < exp exp ) .)
   yacc.py:2687:    )               reduce using rule 34 (smaller -> ( < exp exp ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 113
   yacc.py:2563:
   yacc.py:2565:    (35) equal -> ( = exp exps ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 35 (equal -> ( = exp exps ) .)
   yacc.py:2687:    NUMBER          reduce using rule 35 (equal -> ( = exp exps ) .)
   yacc.py:2687:    (               reduce using rule 35 (equal -> ( = exp exps ) .)
   yacc.py:2687:    ID              reduce using rule 35 (equal -> ( = exp exps ) .)
   yacc.py:2687:    $end            reduce using rule 35 (equal -> ( = exp exps ) .)
   yacc.py:2687:    )               reduce using rule 35 (equal -> ( = exp exps ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 114
   yacc.py:2563:
   yacc.py:2565:    (39) and_op -> ( AND exp exps ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 39 (and_op -> ( AND exp exps ) .)
   yacc.py:2687:    NUMBER          reduce using rule 39 (and_op -> ( AND exp exps ) .)
   yacc.py:2687:    (               reduce using rule 39 (and_op -> ( AND exp exps ) .)
   yacc.py:2687:    ID              reduce using rule 39 (and_op -> ( AND exp exps ) .)
   yacc.py:2687:    $end            reduce using rule 39 (and_op -> ( AND exp exps ) .)
   yacc.py:2687:    )               reduce using rule 39 (and_op -> ( AND exp exps ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 115
   yacc.py:2563:
   yacc.py:2565:    (40) or_op -> ( OR exp exps ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 40 (or_op -> ( OR exp exps ) .)
   yacc.py:2687:    NUMBER          reduce using rule 40 (or_op -> ( OR exp exps ) .)
   yacc.py:2687:    (               reduce using rule 40 (or_op -> ( OR exp exps ) .)
   yacc.py:2687:    ID              reduce using rule 40 (or_op -> ( OR exp exps ) .)
   yacc.py:2687:    $end            reduce using rule 40 (or_op -> ( OR exp exps ) .)
   yacc.py:2687:    )               reduce using rule 40 (or_op -> ( OR exp exps ) .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 116
   yacc.py:2563:
   yacc.py:2565:    (57) if_exp -> ( IF exp exp exp ) .
   yacc.py:2566:
   yacc.py:2687:    BOOL_VAL        reduce using rule 57 (if_exp -> ( IF exp exp exp ) .)
   yacc.py:2687:    NUMBER          reduce using rule 57 (if_exp -> ( IF exp exp exp ) .)
   yacc.py:2687:    (               reduce using rule 57 (if_exp -> ( IF exp exp exp ) .)
   yacc.py:2687:    ID              reduce using rule 57 (if_exp -> ( IF exp exp exp ) .)
   yacc.py:2687:    $end            reduce using rule 57 (if_exp -> ( IF exp exp exp ) .)
   yacc.py:2687:    )               reduce using rule 57 (if_exp -> ( IF exp exp exp ) .)
   yacc.py:2689:
   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 434:Stack  : . LexToken((,'(',1,0)
   yacc.py: 445:Action : Shift and goto state 15
   yacc.py: 410:
   yacc.py: 411:State  : 15
   yacc.py: 434:Stack  : ( . LexToken(PRINT_NUM,'print-num',1,1)
   yacc.py: 445:Action : Shift and goto state 31
   yacc.py: 410:
   yacc.py: 411:State  : 31
   yacc.py: 434:Stack  : ( PRINT_NUM . LexToken((,'(',1,10)
   yacc.py: 445:Action : Shift and goto state 50
   yacc.py: 410:
   yacc.py: 411:State  : 50
   yacc.py: 434:Stack  : ( PRINT_NUM ( . LexToken((,'(',1,11)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( . LexToken(FUN,'fun',1,12)
   yacc.py: 445:Action : Shift and goto state 33
   yacc.py: 410:
   yacc.py: 411:State  : 33
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN . LexToken((,'(',1,16)
   yacc.py: 445:Action : Shift and goto state 53
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN ( . LexToken(ID,'x',1,17)
   yacc.py: 445:Action : Shift and goto state 76
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN ( ID . LexToken(),')',1,18)
   yacc.py: 473:Action : Reduce rule [empty -> <empty>] with [] and goto state 77
   yacc.py: 548:Result : <NoneType @ 0x7ff8d60ca7f8> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 77
   yacc.py: 430:Defaulted state 77: Reduce using 49
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN ( ID empty . LexToken(),')',1,18)
   yacc.py: 469:Action : Reduce rule [ids -> empty] with [None] and goto state 99
   yacc.py: 506:Result : <list @ 0x17266427280> ([])
   yacc.py: 410:
   yacc.py: 411:State  : 99
   yacc.py: 430:Defaulted state 99: Reduce using 48
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN ( ID ids . LexToken(),')',1,18)
   yacc.py: 469:Action : Reduce rule [ids -> ID ids] with ['x',[]] and goto state 75
   yacc.py: 506:Result : <list @ 0x17266499540> (['x'])
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN ( ids . LexToken(),')',1,18)
   yacc.py: 445:Action : Shift and goto state 98
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN ( ids ) . LexToken((,'(',1,20)
   yacc.py: 469:Action : Reduce rule [fun_ids -> ( ids )] with ['(',['x'],')'] and goto state 54
   yacc.py: 506:Result : <list @ 0x17266499540> (['x'])
   yacc.py: 410:
   yacc.py: 411:State  : 54
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids . LexToken((,'(',1,20)
   yacc.py: 473:Action : Reduce rule [empty -> <empty>] with [] and goto state 80
   yacc.py: 548:Result : <NoneType @ 0x7ff8d60ca7f8> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 80
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids empty . LexToken((,'(',1,20)
   yacc.py: 469:Action : Reduce rule [def_stmts -> empty] with [None] and goto state 79
   yacc.py: 506:Result : <list @ 0x17266427280> ([])
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts . LexToken((,'(',1,20)
   yacc.py: 445:Action : Shift and goto state 103
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( . LexToken(+,'+',1,21)
   yacc.py: 445:Action : Shift and goto state 37
   yacc.py: 410:
   yacc.py: 411:State  : 37
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + . LexToken(ID,'x',1,23)
   yacc.py: 445:Action : Shift and goto state 16
   yacc.py: 410:
   yacc.py: 411:State  : 16
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + ID . LexToken(NUMBER,1,1,25)
   yacc.py: 469:Action : Reduce rule [variable -> ID] with ['x'] and goto state 9
   yacc.py: 506:Result : <AstNode @ 0x17266469c90> (Node(node_type=NodeType.VARIABLE, leaf=x ...)
   yacc.py: 410:
   yacc.py: 411:State  : 9
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + variable . LexToken(NUMBER,1,1,25)
   yacc.py: 469:Action : Reduce rule [exp -> variable] with [<AstNode @ 0x17266469c90>] and goto state 61
   yacc.py: 506:Result : <AstNode @ 0x17266469c90> (Node(node_type=NodeType.VARIABLE, leaf=x ...)
   yacc.py: 410:
   yacc.py: 411:State  : 61
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + exp . LexToken(NUMBER,1,1,25)
   yacc.py: 445:Action : Shift and goto state 8
   yacc.py: 410:
   yacc.py: 411:State  : 8
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + exp NUMBER . LexToken(),')',1,26)
   yacc.py: 469:Action : Reduce rule [exp -> NUMBER] with [1] and goto state 85
   yacc.py: 506:Result : <AstNode @ 0x17266469300> (Node(node_type=NodeType.NUMBER, leaf=1,  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + exp exp . LexToken(),')',1,26)
   yacc.py: 469:Action : Reduce rule [exps -> exp] with [<AstNode @ 0x17266469300>] and goto state 86
   yacc.py: 506:Result : <list @ 0x172664aef00> ([Node(node_type=NodeType.NUMBER, leaf=1, ...)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + exp exps . LexToken(),')',1,26)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts ( + exp exps ) . LexToken(),')',1,27)
   yacc.py: 469:Action : Reduce rule [plus -> ( + exp exps )] with ['(','+',<AstNode @ 0x17266469c90>,<list @ 0x172664aef00>,')'] and goto state 17
   yacc.py: 506:Result : <AstNode @ 0x17266469c60> (Node(node_type=NodeType.NUM_OP, leaf=+,  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 17
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts plus . LexToken(),')',1,27)
   yacc.py: 469:Action : Reduce rule [num_op -> plus] with [<AstNode @ 0x17266469c60>] and goto state 10
   yacc.py: 506:Result : <AstNode @ 0x17266469c60> (Node(node_type=NodeType.NUM_OP, leaf=+,  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 10
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts num_op . LexToken(),')',1,27)
   yacc.py: 469:Action : Reduce rule [exp -> num_op] with [<AstNode @ 0x17266469c60>] and goto state 101
   yacc.py: 506:Result : <AstNode @ 0x17266469c60> (Node(node_type=NodeType.NUM_OP, leaf=+,  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 101
   yacc.py: 430:Defaulted state 101: Reduce using 46
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids def_stmts exp . LexToken(),')',1,27)
   yacc.py: 469:Action : Reduce rule [fun_body -> def_stmts exp] with [[],<AstNode @ 0x17266469c60>] and goto state 78
   yacc.py: 506:Result : <AstNode @ 0x17266468fa0> (Node(node_type=NodeType.FUN_BODY, leaf=N ...)
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids fun_body . LexToken(),')',1,27)
   yacc.py: 445:Action : Shift and goto state 100
   yacc.py: 410:
   yacc.py: 411:State  : 100
   yacc.py: 434:Stack  : ( PRINT_NUM ( ( FUN fun_ids fun_body ) . LexToken(NUMBER,3,1,29)
   yacc.py: 469:Action : Reduce rule [fun_exp -> ( FUN fun_ids fun_body )] with ['(','fun',['x'],<AstNode @ 0x17266468fa0>,')'] and goto state 34
   yacc.py: 506:Result : <AstNode @ 0x1726646ae00> (Node(node_type=NodeType.FUN, leaf=fun, c ...)
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp . LexToken(NUMBER,3,1,29)
   yacc.py: 445:Action : Shift and goto state 8
   yacc.py: 410:
   yacc.py: 411:State  : 8
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp NUMBER . LexToken(),')',1,30)
   yacc.py: 469:Action : Reduce rule [exp -> NUMBER] with [3] and goto state 58
   yacc.py: 506:Result : <AstNode @ 0x172664690f0> (Node(node_type=NodeType.NUMBER, leaf=3,  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 58
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp exp . LexToken(),')',1,30)
   yacc.py: 469:Action : Reduce rule [param -> exp] with [<AstNode @ 0x172664690f0>] and goto state 56
   yacc.py: 506:Result : <AstNode @ 0x172664690f0> (Node(node_type=NodeType.NUMBER, leaf=3,  ...)
   yacc.py: 410:
   yacc.py: 411:State  : 56
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp param . LexToken(),')',1,30)
   yacc.py: 473:Action : Reduce rule [empty -> <empty>] with [] and goto state 57
   yacc.py: 548:Result : <NoneType @ 0x7ff8d60ca7f8> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 57
   yacc.py: 430:Defaulted state 57: Reduce using 53
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp param empty . LexToken(),')',1,30)
   yacc.py: 469:Action : Reduce rule [params -> empty] with [None] and goto state 82
   yacc.py: 506:Result : <list @ 0x172664a7240> ([])
   yacc.py: 410:
   yacc.py: 411:State  : 82
   yacc.py: 430:Defaulted state 82: Reduce using 52
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp param params . LexToken(),')',1,30)
   yacc.py: 469:Action : Reduce rule [params -> param params] with [<AstNode @ 0x172664690f0>,[]] and goto state 55
   yacc.py: 506:Result : <list @ 0x172664a7700> ([Node(node_type=NodeType.NUMBER, leaf=3, ...)
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp params . LexToken(),')',1,30)
   yacc.py: 445:Action : Shift and goto state 81
   yacc.py: 410:
   yacc.py: 411:State  : 81
   yacc.py: 434:Stack  : ( PRINT_NUM ( fun_exp params ) . LexToken(),')',1,31)
   yacc.py: 469:Action : Reduce rule [fun_call -> ( fun_exp params )] with ['(',<AstNode @ 0x1726646ae00>,<list @ 0x172664a7700>,')'] and goto state 13
   yacc.py: 506:Result : <AstNode @ 0x17266469510> (Node(node_type=NodeType.FUN_CALL, leaf=f ...)
   yacc.py: 410:
   yacc.py: 411:State  : 13
   yacc.py: 434:Stack  : ( PRINT_NUM fun_call . LexToken(),')',1,31)
   yacc.py: 469:Action : Reduce rule [exp -> fun_call] with [<AstNode @ 0x17266469510>] and goto state 51
   yacc.py: 506:Result : <AstNode @ 0x17266469510> (Node(node_type=NodeType.FUN_CALL, leaf=f ...)
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 434:Stack  : ( PRINT_NUM exp . LexToken(),')',1,31)
   yacc.py: 445:Action : Shift and goto state 73
   yacc.py: 410:
   yacc.py: 411:State  : 73
   yacc.py: 434:Stack  : ( PRINT_NUM exp ) . $end
   yacc.py: 469:Action : Reduce rule [print_stmt -> ( PRINT_NUM exp )] with ['(','print-num',<AstNode @ 0x17266469510>,')'] and goto state 6
   yacc.py: 506:Result : <AstNode @ 0x17266469b40> (Node(node_type=NodeType.PRINT, leaf=PRIN ...)
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 434:Stack  : print_stmt . $end
   yacc.py: 469:Action : Reduce rule [stmt -> print_stmt] with [<AstNode @ 0x17266469b40>] and goto state 3
   yacc.py: 506:Result : <AstNode @ 0x17266469b40> (Node(node_type=NodeType.PRINT, leaf=PRIN ...)
   yacc.py: 410:
   yacc.py: 411:State  : 3
   yacc.py: 434:Stack  : stmt . $end
   yacc.py: 469:Action : Reduce rule [stmts -> stmt] with [<AstNode @ 0x17266469b40>] and goto state 2
   yacc.py: 506:Result : <list @ 0x172664af040> ([Node(node_type=NodeType.PRINT, leaf=PRI ...)
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 430:Defaulted state 2: Reduce using 2
   yacc.py: 434:Stack  : stmts . $end
   yacc.py: 469:Action : Reduce rule [program -> stmts] with [<list @ 0x172664af040>] and goto state 1
   yacc.py: 506:Result : <AstNode @ 0x17266469a80> (Node(node_type=NodeType.PROGRAM, leaf=No ...)
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 434:Stack  : program . $end
   yacc.py: 571:Done   : Returning <AstNode @ 0x17266469a80> (Node(node_type=NodeType.PROGRAM, leaf=No ...)
   yacc.py: 572:PLY: PARSE DEBUG END
