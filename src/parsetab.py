
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleft+-left*/AND BOOL_VAL DEFINE FUN ID IF MODULUS NOT NUMBER OR PRINT_BOOL PRINT_NUM SEPRATORempty :\n    program : stmts\n    \n    stmts : stmt stmts\n             | stmt \n    \n    stmt : exp\n            | def_stmt\n            | print_stmt\n    \n    print_stmt : '(' PRINT_NUM ')' exp\n                  | '(' PRINT_BOOL ')' exp\n    \n    exps : exp exps\n         | exp\n    \n    exp : BOOL_VAL\n        | NUMBER\n        | variable\n        | num_op\n        | logical_op\n        | fun_exp\n        | fun_call\n        | if_exp\n    \n    num_op  : plus\n            | minus\n            | multiply\n            | divide\n            | modulus\n            | greater\n            | smaller\n            | equal\n    \n    plus       : '(' '+' exp exps ')'\n    \n    minus      : '(' '-' exp exp ')'\n    \n    multiply   : '(' '*' exp exp exps ')'\n    \n    divide     : '(' '/' exp exp ')'\n    \n    modulus    : '(' MODULUS exp exp ')'\n    \n    greater    : '(' '>' exp exp ')'\n    \n    smaller    : '(' '<' exp exp ')'\n    \n    equal      : '(' '=' exp exps ')' \n    \n    logical_op : and_op\n                 | or_op\n                 | not_op\n    \n    and_op    : '(' AND exp exps ')'\n    \n    or_op     : '(' OR exp exps ')'\n    \n    not_op    : '(' NOT exp ')'\n    \n    def_stmt : '(' DEFINE variable exp ')'\n    \n    variable : ID\n    \n    fun_exp : '(' FUN fun_ids fun_body ')'\n    fun_ids : '(' ids ')'\n    ids : ID ids\n       | empty\n    fun_body : exp\n    params : param params\n          | empty\n    fun_call : fun_exp params\n            | fun_name params\n    param : exp\n    last_exp : exp\n    fun_name : ID\n    \n    if_exp : '(' IF test_exp then_exp else_exp ')'\n    test_exp : exp\n    then_exp : exp\n    else_exp : exp\n    "
    
_lr_action_items = {'BOOL_VAL':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,80,81,82,85,93,94,95,97,101,102,104,105,106,107,108,109,110,111,112,],[7,7,-5,-6,-7,-12,-13,-14,-15,-16,7,-18,-19,-43,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,7,-51,7,-50,-53,7,7,7,7,7,7,7,7,7,7,7,7,-52,-49,7,-43,7,7,7,7,-57,7,7,7,7,7,7,7,7,7,7,-8,-9,7,-58,7,7,-41,-42,-45,-44,-28,-29,-31,-32,-33,-34,-35,-39,-40,-56,-30,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,80,81,82,85,93,94,95,97,101,102,104,105,106,107,108,109,110,111,112,],[8,8,-5,-6,-7,-12,-13,-14,-15,-16,8,-18,-19,-43,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,8,-51,8,-50,-53,8,8,8,8,8,8,8,8,8,8,8,8,-52,-49,8,-43,8,8,8,8,-57,8,8,8,8,8,8,8,8,8,8,-8,-9,8,-58,8,8,-41,-42,-45,-44,-28,-29,-31,-32,-33,-34,-35,-39,-40,-56,-30,]),'(':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,80,81,82,85,93,94,95,97,101,102,104,105,106,107,108,109,110,111,112,],[15,15,-5,-6,-7,-12,-13,-14,-15,-16,34,-18,-19,-43,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,34,-51,34,-50,-53,57,34,34,34,34,34,34,34,34,34,34,34,34,-52,-49,34,-43,34,34,34,34,-57,34,34,34,34,34,34,34,34,34,34,-8,-9,34,-58,34,34,-41,-42,-45,-44,-28,-29,-31,-32,-33,-34,-35,-39,-40,-56,-30,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74,76,80,81,82,85,93,94,95,97,101,102,104,105,106,107,108,109,110,111,112,],[16,16,-5,-6,-7,-12,-13,-14,-15,-16,16,-18,-19,-43,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,16,-51,16,-50,-53,54,16,16,16,16,16,16,16,16,16,16,16,16,-52,-49,16,-43,16,16,76,16,16,-57,16,16,16,16,16,16,16,16,16,16,-8,-9,76,16,-58,16,16,-41,-42,-45,-44,-28,-29,-31,-32,-33,-34,-35,-39,-40,-56,-30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,51,52,73,74,93,94,97,101,102,104,105,106,107,108,109,110,111,112,],[0,-2,-4,-5,-6,-7,-12,-13,-14,-15,-16,-1,-18,-19,-43,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-1,-3,-51,-1,-50,-53,-52,-49,-8,-9,-41,-42,-44,-28,-29,-31,-32,-33,-34,-35,-39,-40,-56,-30,]),')':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,36,37,51,52,57,71,72,75,76,77,78,79,82,83,84,86,87,88,89,90,91,92,93,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,],[-12,-13,-14,-15,-16,-1,-18,-19,-43,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-1,-51,-1,-50,-53,55,56,-52,-49,-1,93,94,95,-1,-47,97,-48,-11,101,102,104,105,106,107,108,109,110,-41,-46,-44,111,-59,-10,-28,-29,112,-31,-32,-33,-34,-35,-39,-40,-56,-30,]),'DEFINE':([15,],[35,]),'PRINT_NUM':([15,],[36,]),'PRINT_BOOL':([15,],[37,]),'FUN':([15,34,],[38,38,]),'IF':([15,34,],[39,39,]),'+':([15,34,],[40,40,]),'-':([15,34,],[41,41,]),'*':([15,34,],[42,42,]),'/':([15,34,],[43,43,]),'MODULUS':([15,34,],[44,44,]),'>':([15,34,],[45,45,]),'<':([15,34,],[46,46,]),'=':([15,34,],[47,47,]),'AND':([15,34,],[48,48,]),'OR':([15,34,],[49,49,]),'NOT':([15,34,],[50,50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([0,3,],[2,29,]),'stmt':([0,3,],[3,3,]),'exp':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[4,4,33,33,33,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,81,82,84,85,86,87,88,89,82,82,82,99,82,82,]),'def_stmt':([0,3,],[5,5,]),'print_stmt':([0,3,],[6,6,]),'variable':([0,3,12,28,31,35,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[9,9,9,9,9,53,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'num_op':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'logical_op':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'fun_exp':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'fun_call':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'if_exp':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'plus':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'minus':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiply':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'divide':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'modulus':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'greater':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'smaller':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'equal':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'and_op':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'or_op':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'not_op':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'fun_name':([0,3,12,28,31,39,40,41,42,43,44,45,46,47,48,49,50,53,55,56,58,59,61,62,63,64,65,66,67,68,69,70,80,82,85,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'params':([12,28,31,],[30,51,52,]),'param':([12,28,31,],[31,31,31,]),'empty':([12,28,31,57,76,],[32,32,32,77,77,]),'fun_ids':([38,],[58,]),'test_exp':([39,],[59,]),'ids':([57,76,],[75,96,]),'fun_body':([58,],[78,]),'then_exp':([59,],[80,]),'exps':([61,68,69,70,82,85,],[83,90,91,92,100,103,]),'else_exp':([80,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',8),
  ('program -> stmts','program',1,'p_program','parser.py',13),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','parser.py',18),
  ('stmts -> stmt','stmts',1,'p_stmts','parser.py',19),
  ('stmt -> exp','stmt',1,'p_stmt','parser.py',23),
  ('stmt -> def_stmt','stmt',1,'p_stmt','parser.py',24),
  ('stmt -> print_stmt','stmt',1,'p_stmt','parser.py',25),
  ('print_stmt -> ( PRINT_NUM ) exp','print_stmt',4,'p_print_stmt','parser.py',35),
  ('print_stmt -> ( PRINT_BOOL ) exp','print_stmt',4,'p_print_stmt','parser.py',36),
  ('exps -> exp exps','exps',2,'p_exps','parser.py',40),
  ('exps -> exp','exps',1,'p_exps','parser.py',41),
  ('exp -> BOOL_VAL','exp',1,'p_exp','parser.py',50),
  ('exp -> NUMBER','exp',1,'p_exp','parser.py',51),
  ('exp -> variable','exp',1,'p_exp','parser.py',52),
  ('exp -> num_op','exp',1,'p_exp','parser.py',53),
  ('exp -> logical_op','exp',1,'p_exp','parser.py',54),
  ('exp -> fun_exp','exp',1,'p_exp','parser.py',55),
  ('exp -> fun_call','exp',1,'p_exp','parser.py',56),
  ('exp -> if_exp','exp',1,'p_exp','parser.py',57),
  ('num_op -> plus','num_op',1,'p_num_op','parser.py',64),
  ('num_op -> minus','num_op',1,'p_num_op','parser.py',65),
  ('num_op -> multiply','num_op',1,'p_num_op','parser.py',66),
  ('num_op -> divide','num_op',1,'p_num_op','parser.py',67),
  ('num_op -> modulus','num_op',1,'p_num_op','parser.py',68),
  ('num_op -> greater','num_op',1,'p_num_op','parser.py',69),
  ('num_op -> smaller','num_op',1,'p_num_op','parser.py',70),
  ('num_op -> equal','num_op',1,'p_num_op','parser.py',71),
  ('plus -> ( + exp exps )','plus',5,'p_plus','parser.py',78),
  ('minus -> ( - exp exp )','minus',5,'p_minus','parser.py',86),
  ('multiply -> ( * exp exp exps )','multiply',6,'p_multiply','parser.py',93),
  ('divide -> ( / exp exp )','divide',5,'p_devide','parser.py',106),
  ('modulus -> ( MODULUS exp exp )','modulus',5,'p_modulus','parser.py',113),
  ('greater -> ( > exp exp )','greater',5,'p_greater','parser.py',120),
  ('smaller -> ( < exp exp )','smaller',5,'p_smaller','parser.py',127),
  ('equal -> ( = exp exps )','equal',5,'p_equal','parser.py',134),
  ('logical_op -> and_op','logical_op',1,'p_ligical_op','parser.py',148),
  ('logical_op -> or_op','logical_op',1,'p_ligical_op','parser.py',149),
  ('logical_op -> not_op','logical_op',1,'p_ligical_op','parser.py',150),
  ('and_op -> ( AND exp exps )','and_op',5,'p_and_op','parser.py',156),
  ('or_op -> ( OR exp exps )','or_op',5,'p_or_op','parser.py',166),
  ('not_op -> ( NOT exp )','not_op',4,'p_not_op','parser.py',177),
  ('def_stmt -> ( DEFINE variable exp )','def_stmt',5,'p_def_stmt','parser.py',184),
  ('variable -> ID','variable',1,'p_variable','parser.py',191),
  ('fun_exp -> ( FUN fun_ids fun_body )','fun_exp',5,'p_fun_exp','parser.py',198),
  ('fun_ids -> ( ids )','fun_ids',3,'p_fun_exp','parser.py',199),
  ('ids -> ID ids','ids',2,'p_fun_exp','parser.py',200),
  ('ids -> empty','ids',1,'p_fun_exp','parser.py',201),
  ('fun_body -> exp','fun_body',1,'p_fun_exp','parser.py',202),
  ('params -> param params','params',2,'p_fun_exp','parser.py',203),
  ('params -> empty','params',1,'p_fun_exp','parser.py',204),
  ('fun_call -> fun_exp params','fun_call',2,'p_fun_exp','parser.py',205),
  ('fun_call -> fun_name params','fun_call',2,'p_fun_exp','parser.py',206),
  ('param -> exp','param',1,'p_fun_exp','parser.py',207),
  ('last_exp -> exp','last_exp',1,'p_fun_exp','parser.py',208),
  ('fun_name -> ID','fun_name',1,'p_fun_exp','parser.py',209),
  ('if_exp -> ( IF test_exp then_exp else_exp )','if_exp',6,'p_if_exp','parser.py',213),
  ('test_exp -> exp','test_exp',1,'p_if_exp','parser.py',214),
  ('then_exp -> exp','then_exp',1,'p_if_exp','parser.py',215),
  ('else_exp -> exp','else_exp',1,'p_if_exp','parser.py',216),
]
