
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleft+-left*/AND BOOL_VAL DEFINE FUN ID IF MODULUS NOT NUMBER OR PRINT_BOOL PRINT_NUM SEPRATORempty :\n    program : stmts\n    \n    stmts : stmt stmts\n             | stmt \n    \n    stmt : exp\n            | def_stmt\n            | print_stmt\n    \n    print_stmt : '(' PRINT_NUM exp ')' \n                  | '(' PRINT_BOOL exp ')'\n    \n    exps : exp exps\n         | exp\n    \n    exp : BOOL_VAL\n        | NUMBER\n        | variable\n        | num_op\n        | logical_op\n        | fun_exp\n        | fun_call\n        | if_exp\n    \n    num_op  : plus\n            | minus\n            | multiply\n            | divide\n            | modulus\n            | greater\n            | smaller\n            | equal\n    \n    plus       : '(' '+' exp exps ')'\n    \n    minus      : '(' '-' exp exp ')'\n    \n    multiply   : '(' '*' exp exps ')'\n    \n    divide     : '(' '/' exp exp ')'\n    \n    modulus    : '(' MODULUS exp exp ')'\n    \n    greater    : '(' '>' exp exp ')'\n    \n    smaller    : '(' '<' exp exp ')'\n    \n    equal      : '(' '=' exp exps ')' \n    \n    logical_op : and_op\n                 | or_op\n                 | not_op\n    \n    and_op    : '(' AND exp exps ')'\n    \n    or_op     : '(' OR exp exps ')'\n    \n    not_op    : '(' NOT exp ')'\n    \n    def_stmt : '(' DEFINE ID exp ')'\n    \n    fun_exp : '(' FUN fun_ids exp ')'\n    \n    fun_ids : '(' ids ')'\n    \n    ids : ID ids\n       | empty\n    \n    last_exp : exp\n    \n    fun_call : '(' fun_exp params ')'\n            | '(' fun_name params ')'\n    \n    params : param params\n          | empty\n    \n    param : exp\n    \n    variable : ID\n    \n    fun_name : ID\n    \n    if_exp : '(' IF exp exp exp ')'\n    "
    
_lr_action_items = {'BOOL_VAL':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,79,81,82,83,94,95,96,98,101,102,103,104,105,106,107,108,109,110,111,],[7,7,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-54,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-52,7,7,7,7,7,7,7,7,7,7,7,-8,-9,-48,-49,7,7,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,79,81,82,83,94,95,96,98,101,102,103,104,105,106,107,108,109,110,111,],[8,8,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-54,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-52,8,8,8,8,8,8,8,8,8,8,8,-8,-9,-48,-49,8,8,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'(':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,79,81,82,83,94,95,96,98,101,102,103,104,105,106,107,108,109,110,111,],[15,15,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,29,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-54,50,50,53,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,29,50,50,-52,50,50,50,50,50,50,50,50,50,50,50,-8,-9,-48,-49,50,50,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,76,79,81,82,83,94,95,96,98,101,102,103,104,105,106,107,108,109,110,111,],[16,16,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,31,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,49,-54,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,31,76,16,16,-52,16,16,16,16,16,16,16,16,16,16,16,-8,-9,76,-48,-49,16,16,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,73,74,79,81,94,95,98,101,102,103,104,105,106,107,108,109,110,111,],[0,-2,-4,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-3,-8,-9,-48,-49,-41,-42,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),')':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,31,35,36,51,52,53,55,56,57,58,59,71,72,75,76,77,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,],[-12,-13,-14,-15,-16,-17,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-54,-1,-1,73,74,-1,79,-1,-51,-52,81,94,95,96,-1,-46,98,-48,-50,-49,-11,101,102,103,104,105,106,107,108,109,110,-41,-45,-43,111,-10,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'DEFINE':([15,],[30,]),'PRINT_NUM':([15,],[32,]),'PRINT_BOOL':([15,],[33,]),'FUN':([15,29,50,],[34,34,34,]),'IF':([15,50,],[37,37,]),'+':([15,50,],[38,38,]),'-':([15,50,],[39,39,]),'*':([15,50,],[40,40,]),'/':([15,50,],[41,41,]),'MODULUS':([15,50,],[42,42,]),'>':([15,50,],[43,43,]),'<':([15,50,],[44,44,]),'=':([15,50,],[45,45,]),'AND':([15,50,],[46,46,]),'OR':([15,50,],[47,47,]),'NOT':([15,50,],[48,48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([0,3,],[2,28,]),'stmt':([0,3,],[3,3,]),'exp':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[4,4,51,52,58,58,60,61,62,63,64,65,66,67,68,69,70,71,72,78,58,82,83,85,83,87,88,89,90,83,83,83,99,83,]),'def_stmt':([0,3,],[5,5,]),'print_stmt':([0,3,],[6,6,]),'variable':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'num_op':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'logical_op':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'fun_exp':([0,3,15,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[12,12,35,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,35,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'fun_call':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'if_exp':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'plus':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'minus':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiply':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'divide':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'modulus':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'greater':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'smaller':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'equal':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'and_op':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'or_op':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'not_op':([0,3,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,60,61,62,63,64,65,66,67,68,69,70,82,83,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'fun_name':([15,50,],[36,36,]),'fun_ids':([34,],[54,]),'params':([35,36,56,],[55,59,80,]),'param':([35,36,56,],[56,56,56,]),'empty':([35,36,53,56,76,],[57,57,77,57,77,]),'ids':([53,76,],[75,97,]),'exps':([61,63,68,69,70,83,],[84,86,91,92,93,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','my_yacc.py',10),
  ('program -> stmts','program',1,'p_program','my_yacc.py',15),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','my_yacc.py',20),
  ('stmts -> stmt','stmts',1,'p_stmts','my_yacc.py',21),
  ('stmt -> exp','stmt',1,'p_stmt','my_yacc.py',36),
  ('stmt -> def_stmt','stmt',1,'p_stmt','my_yacc.py',37),
  ('stmt -> print_stmt','stmt',1,'p_stmt','my_yacc.py',38),
  ('print_stmt -> ( PRINT_NUM exp )','print_stmt',4,'p_print_stmt','my_yacc.py',44),
  ('print_stmt -> ( PRINT_BOOL exp )','print_stmt',4,'p_print_stmt','my_yacc.py',45),
  ('exps -> exp exps','exps',2,'p_exps','my_yacc.py',55),
  ('exps -> exp','exps',1,'p_exps','my_yacc.py',56),
  ('exp -> BOOL_VAL','exp',1,'p_exp','my_yacc.py',66),
  ('exp -> NUMBER','exp',1,'p_exp','my_yacc.py',67),
  ('exp -> variable','exp',1,'p_exp','my_yacc.py',68),
  ('exp -> num_op','exp',1,'p_exp','my_yacc.py',69),
  ('exp -> logical_op','exp',1,'p_exp','my_yacc.py',70),
  ('exp -> fun_exp','exp',1,'p_exp','my_yacc.py',71),
  ('exp -> fun_call','exp',1,'p_exp','my_yacc.py',72),
  ('exp -> if_exp','exp',1,'p_exp','my_yacc.py',73),
  ('num_op -> plus','num_op',1,'p_num_op','my_yacc.py',84),
  ('num_op -> minus','num_op',1,'p_num_op','my_yacc.py',85),
  ('num_op -> multiply','num_op',1,'p_num_op','my_yacc.py',86),
  ('num_op -> divide','num_op',1,'p_num_op','my_yacc.py',87),
  ('num_op -> modulus','num_op',1,'p_num_op','my_yacc.py',88),
  ('num_op -> greater','num_op',1,'p_num_op','my_yacc.py',89),
  ('num_op -> smaller','num_op',1,'p_num_op','my_yacc.py',90),
  ('num_op -> equal','num_op',1,'p_num_op','my_yacc.py',91),
  ('plus -> ( + exp exps )','plus',5,'p_plus','my_yacc.py',97),
  ('minus -> ( - exp exp )','minus',5,'p_minus','my_yacc.py',103),
  ('multiply -> ( * exp exps )','multiply',5,'p_multiply','my_yacc.py',109),
  ('divide -> ( / exp exp )','divide',5,'p_devide','my_yacc.py',115),
  ('modulus -> ( MODULUS exp exp )','modulus',5,'p_modulus','my_yacc.py',121),
  ('greater -> ( > exp exp )','greater',5,'p_greater','my_yacc.py',127),
  ('smaller -> ( < exp exp )','smaller',5,'p_smaller','my_yacc.py',133),
  ('equal -> ( = exp exps )','equal',5,'p_equal','my_yacc.py',139),
  ('logical_op -> and_op','logical_op',1,'p_logical_op','my_yacc.py',145),
  ('logical_op -> or_op','logical_op',1,'p_logical_op','my_yacc.py',146),
  ('logical_op -> not_op','logical_op',1,'p_logical_op','my_yacc.py',147),
  ('and_op -> ( AND exp exps )','and_op',5,'p_and_op','my_yacc.py',153),
  ('or_op -> ( OR exp exps )','or_op',5,'p_or_op','my_yacc.py',159),
  ('not_op -> ( NOT exp )','not_op',4,'p_not_op','my_yacc.py',166),
  ('def_stmt -> ( DEFINE ID exp )','def_stmt',5,'p_def_stmt','my_yacc.py',172),
  ('fun_exp -> ( FUN fun_ids exp )','fun_exp',5,'p_fun_exp','my_yacc.py',181),
  ('fun_ids -> ( ids )','fun_ids',3,'p_fun_ids','my_yacc.py',191),
  ('ids -> ID ids','ids',2,'p_ids','my_yacc.py',197),
  ('ids -> empty','ids',1,'p_ids','my_yacc.py',198),
  ('last_exp -> exp','last_exp',1,'p_last_exp','my_yacc.py',207),
  ('fun_call -> ( fun_exp params )','fun_call',4,'p_fun_call','my_yacc.py',213),
  ('fun_call -> ( fun_name params )','fun_call',4,'p_fun_call','my_yacc.py',214),
  ('params -> param params','params',2,'p_params','my_yacc.py',222),
  ('params -> empty','params',1,'p_params','my_yacc.py',223),
  ('param -> exp','param',1,'p_param','my_yacc.py',232),
  ('variable -> ID','variable',1,'p_variable','my_yacc.py',238),
  ('fun_name -> ID','fun_name',1,'p_fun_name','my_yacc.py',246),
  ('if_exp -> ( IF exp exp exp )','if_exp',6,'p_if_exp','my_yacc.py',253),
]
