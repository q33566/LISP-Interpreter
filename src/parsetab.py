
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleft+-left*/AND BOOL_VAL DEFINE FUN ID IF MODULUS NOT NUMBER OR PRINT_BOOL PRINT_NUM SEPRATORempty :\n    program : stmts\n    \n    stmts : stmt stmts\n             | stmt \n    \n    stmt : exp\n            | def_stmt\n            | print_stmt\n    \n    print_stmt : '(' PRINT_NUM exp ')' \n                  | '(' PRINT_BOOL exp ')'\n    \n    exps : exp exps\n         | exp\n    \n    exp : BOOL_VAL\n        | NUMBER\n        | variable\n        | num_op\n        | logical_op\n        | fun_exp\n        | fun_call\n        | if_exp\n    \n    num_op  : plus\n            | minus\n            | multiply\n            | divide\n            | modulus\n            | greater\n            | smaller\n            | equal\n    \n    plus       : '(' '+' exp exps ')'\n    \n    minus      : '(' '-' exp exp ')'\n    \n    multiply   : '(' '*' exp exps ')'\n    \n    divide     : '(' '/' exp exp ')'\n    \n    modulus    : '(' MODULUS exp exp ')'\n    \n    greater    : '(' '>' exp exp ')'\n    \n    smaller    : '(' '<' exp exp ')'\n    \n    equal      : '(' '=' exp exps ')' \n    \n    logical_op : and_op\n                 | or_op\n                 | not_op\n    \n    and_op    : '(' AND exp exps ')'\n    \n    or_op     : '(' OR exp exps ')'\n    \n    not_op    : '(' NOT exp ')'\n    \n    def_stmt : '(' DEFINE ID exp ')'\n    \n    fun_exp : '(' FUN fun_ids exp ')'\n    \n    fun_ids : '(' ids ')'\n    \n    ids : ID ids\n       | empty\n    \n    last_exp : exp\n    \n    fun_call : fun_exp params\n            | fun_name params\n    \n    params : param params\n          | empty\n    \n    param : exp\n    \n    variable : ID\n    \n    fun_name : ID\n    \n    if_exp : '(' IF exp exp exp ')'\n    "
    
_lr_action_items = {'BOOL_VAL':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,61,62,63,64,65,66,67,68,71,72,77,78,89,90,91,93,96,97,98,99,100,101,102,103,104,105,106,],[7,7,-5,-6,-7,-12,-13,-14,-15,-16,7,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,7,-48,7,-51,-52,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-49,-50,7,7,7,7,7,7,7,7,7,7,7,7,7,-8,-9,7,7,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,61,62,63,64,65,66,67,68,71,72,77,78,89,90,91,93,96,97,98,99,100,101,102,103,104,105,106,],[8,8,-5,-6,-7,-12,-13,-14,-15,-16,8,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,8,-48,8,-51,-52,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-49,-50,8,8,8,8,8,8,8,8,8,8,8,8,8,-8,-9,8,8,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'(':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,61,62,63,64,65,66,67,68,71,72,77,78,89,90,91,93,96,97,98,99,100,101,102,103,104,105,106,],[15,15,-5,-6,-7,-12,-13,-14,-15,-16,34,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,34,-48,34,-51,-52,34,34,56,34,34,34,34,34,34,34,34,34,34,34,34,-49,-50,34,34,34,34,34,34,34,34,34,34,34,34,34,-8,-9,34,34,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,74,77,78,89,90,91,93,96,97,98,99,100,101,102,103,104,105,106,],[16,16,-5,-6,-7,-12,-13,-14,-15,-16,16,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,16,-48,16,-51,-52,53,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-49,-50,16,74,16,16,16,16,16,16,16,16,16,16,16,16,-8,-9,74,16,16,-41,-42,-44,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,51,52,71,72,89,90,93,96,97,98,99,100,101,102,103,104,105,106,],[0,-2,-4,-5,-6,-7,-12,-13,-14,-15,-16,-1,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-1,-3,-48,-1,-51,-52,-49,-50,-8,-9,-41,-42,-43,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),')':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,51,52,54,55,56,69,70,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,],[-12,-13,-14,-15,-16,-1,-18,-19,-53,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-1,-48,-1,-51,-52,-49,-50,71,72,-1,89,90,91,-1,-46,93,-11,96,97,98,99,100,101,102,103,104,105,-41,-45,-43,106,-10,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-55,]),'DEFINE':([15,],[35,]),'PRINT_NUM':([15,],[36,]),'PRINT_BOOL':([15,],[37,]),'FUN':([15,34,],[38,38,]),'IF':([15,34,],[39,39,]),'+':([15,34,],[40,40,]),'-':([15,34,],[41,41,]),'*':([15,34,],[42,42,]),'/':([15,34,],[43,43,]),'MODULUS':([15,34,],[44,44,]),'>':([15,34,],[45,45,]),'<':([15,34,],[46,46,]),'=':([15,34,],[47,47,]),'AND':([15,34,],[48,48,]),'OR':([15,34,],[49,49,]),'NOT':([15,34,],[50,50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([0,3,],[2,29,]),'stmt':([0,3,],[3,3,]),'exp':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[4,4,33,33,33,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,76,77,78,80,78,82,83,84,85,78,78,78,94,78,]),'def_stmt':([0,3,],[5,5,]),'print_stmt':([0,3,],[6,6,]),'variable':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'num_op':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'logical_op':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'fun_exp':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'fun_call':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'if_exp':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'plus':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'minus':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiply':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'divide':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'modulus':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'greater':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'smaller':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'equal':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'and_op':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'or_op':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'not_op':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'fun_name':([0,3,12,28,31,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,57,58,59,60,61,62,63,64,65,66,67,68,77,78,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'params':([12,28,31,],[30,51,52,]),'param':([12,28,31,],[31,31,31,]),'empty':([12,28,31,56,74,],[32,32,32,75,75,]),'fun_ids':([38,],[57,]),'ids':([56,74,],[73,92,]),'exps':([59,61,66,67,68,78,],[79,81,86,87,88,95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','my_yacc.py',8),
  ('program -> stmts','program',1,'p_program','my_yacc.py',13),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','my_yacc.py',18),
  ('stmts -> stmt','stmts',1,'p_stmts','my_yacc.py',19),
  ('stmt -> exp','stmt',1,'p_stmt','my_yacc.py',23),
  ('stmt -> def_stmt','stmt',1,'p_stmt','my_yacc.py',24),
  ('stmt -> print_stmt','stmt',1,'p_stmt','my_yacc.py',25),
  ('print_stmt -> ( PRINT_NUM exp )','print_stmt',4,'p_print_stmt','my_yacc.py',35),
  ('print_stmt -> ( PRINT_BOOL exp )','print_stmt',4,'p_print_stmt','my_yacc.py',36),
  ('exps -> exp exps','exps',2,'p_exps','my_yacc.py',47),
  ('exps -> exp','exps',1,'p_exps','my_yacc.py',48),
  ('exp -> BOOL_VAL','exp',1,'p_exp','my_yacc.py',58),
  ('exp -> NUMBER','exp',1,'p_exp','my_yacc.py',59),
  ('exp -> variable','exp',1,'p_exp','my_yacc.py',60),
  ('exp -> num_op','exp',1,'p_exp','my_yacc.py',61),
  ('exp -> logical_op','exp',1,'p_exp','my_yacc.py',62),
  ('exp -> fun_exp','exp',1,'p_exp','my_yacc.py',63),
  ('exp -> fun_call','exp',1,'p_exp','my_yacc.py',64),
  ('exp -> if_exp','exp',1,'p_exp','my_yacc.py',65),
  ('num_op -> plus','num_op',1,'p_num_op','my_yacc.py',71),
  ('num_op -> minus','num_op',1,'p_num_op','my_yacc.py',72),
  ('num_op -> multiply','num_op',1,'p_num_op','my_yacc.py',73),
  ('num_op -> divide','num_op',1,'p_num_op','my_yacc.py',74),
  ('num_op -> modulus','num_op',1,'p_num_op','my_yacc.py',75),
  ('num_op -> greater','num_op',1,'p_num_op','my_yacc.py',76),
  ('num_op -> smaller','num_op',1,'p_num_op','my_yacc.py',77),
  ('num_op -> equal','num_op',1,'p_num_op','my_yacc.py',78),
  ('plus -> ( + exp exps )','plus',5,'p_plus','my_yacc.py',84),
  ('minus -> ( - exp exp )','minus',5,'p_minus','my_yacc.py',90),
  ('multiply -> ( * exp exps )','multiply',5,'p_multiply','my_yacc.py',96),
  ('divide -> ( / exp exp )','divide',5,'p_devide','my_yacc.py',105),
  ('modulus -> ( MODULUS exp exp )','modulus',5,'p_modulus','my_yacc.py',111),
  ('greater -> ( > exp exp )','greater',5,'p_greater','my_yacc.py',117),
  ('smaller -> ( < exp exp )','smaller',5,'p_smaller','my_yacc.py',123),
  ('equal -> ( = exp exps )','equal',5,'p_equal','my_yacc.py',129),
  ('logical_op -> and_op','logical_op',1,'p_ligical_op','my_yacc.py',142),
  ('logical_op -> or_op','logical_op',1,'p_ligical_op','my_yacc.py',143),
  ('logical_op -> not_op','logical_op',1,'p_ligical_op','my_yacc.py',144),
  ('and_op -> ( AND exp exps )','and_op',5,'p_and_op','my_yacc.py',150),
  ('or_op -> ( OR exp exps )','or_op',5,'p_or_op','my_yacc.py',159),
  ('not_op -> ( NOT exp )','not_op',4,'p_not_op','my_yacc.py',171),
  ('def_stmt -> ( DEFINE ID exp )','def_stmt',5,'p_def_stmt','my_yacc.py',177),
  ('fun_exp -> ( FUN fun_ids exp )','fun_exp',5,'p_fun_exp','my_yacc.py',184),
  ('fun_ids -> ( ids )','fun_ids',3,'p_fun_ids','my_yacc.py',196),
  ('ids -> ID ids','ids',2,'p_ids','my_yacc.py',202),
  ('ids -> empty','ids',1,'p_ids','my_yacc.py',203),
  ('last_exp -> exp','last_exp',1,'p_last_exp','my_yacc.py',212),
  ('fun_call -> fun_exp params','fun_call',2,'p_fun_call','my_yacc.py',218),
  ('fun_call -> fun_name params','fun_call',2,'p_fun_call','my_yacc.py',219),
  ('params -> param params','params',2,'p_params','my_yacc.py',228),
  ('params -> empty','params',1,'p_params','my_yacc.py',229),
  ('param -> exp','param',1,'p_param','my_yacc.py',237),
  ('variable -> ID','variable',1,'p_variable','my_yacc.py',243),
  ('fun_name -> ID','fun_name',1,'p_fun_name','my_yacc.py',253),
  ('if_exp -> ( IF exp exp exp )','if_exp',6,'p_if_exp','my_yacc.py',258),
]
