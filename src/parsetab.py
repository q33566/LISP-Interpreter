
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleft+-left*/AND BOOL_VAL DEFINE FUN ID IF MODULUS NOT NUMBER OR PRINT_BOOL PRINT_NUM SEPRATORempty : \n    program : stmts\n    \n    stmts : stmt stmts\n             | stmt \n    \n    stmt : exp\n            | def_stmt\n            | print_stmt\n    \n    print_stmt : '(' PRINT_NUM exp ')' \n                  | '(' PRINT_BOOL exp ')'\n    \n    exps : exp exps\n         | exp\n    \n    exp : BOOL_VAL\n        | NUMBER\n        | variable\n        | num_op\n        | logical_op\n        | fun_exp\n        | fun_call\n        | if_exp\n    \n    num_op  : plus\n            | minus\n            | multiply\n            | divide\n            | modulus\n            | greater\n            | smaller\n            | equal\n    \n    plus       : '(' '+' exp exps ')'\n    \n    minus      : '(' '-' exp exp ')'\n    \n    multiply   : '(' '*' exp exps ')'\n    \n    divide     : '(' '/' exp exp ')'\n    \n    modulus    : '(' MODULUS exp exp ')'\n    \n    greater    : '(' '>' exp exp ')'\n    \n    smaller    : '(' '<' exp exp ')'\n    \n    equal      : '(' '=' exp exps ')' \n    \n    logical_op : and_op\n                 | or_op\n                 | not_op\n    \n    and_op    : '(' AND exp exps ')'\n    \n    or_op     : '(' OR exp exps ')'\n    \n    not_op    : '(' NOT exp ')'\n    \n    def_stmt : '(' DEFINE variable exp ')'\n    \n    def_stmts : empty\n              | def_stmts def_stmt\n    \n    fun_exp : '(' FUN fun_ids fun_body ')'\n    \n    fun_body : def_stmts exp\n    \n    fun_ids : '(' ids ')'\n    \n    ids : ID ids\n       | empty\n    \n    fun_call : '(' fun_exp params ')'\n            | '(' fun_name params ')'\n    \n    params : param params\n          | empty\n    \n    param : exp\n    \n    variable : ID\n    \n    fun_name : ID\n    \n    if_exp : '(' IF exp exp exp ')'\n    "
    
_lr_action_items = {'BOOL_VAL':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,79,80,81,83,84,85,96,97,98,100,102,106,107,108,109,110,111,112,113,114,115,116,],[7,7,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,-55,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-56,7,-1,7,-54,7,7,7,7,7,7,7,7,7,7,7,-8,-9,7,-43,-50,-51,7,7,-41,-42,-47,-45,-44,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-57,]),'NUMBER':([0,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,79,80,81,83,84,85,96,97,98,100,102,106,107,108,109,110,111,112,113,114,115,116,],[8,8,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,-55,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-56,8,-1,8,-54,8,8,8,8,8,8,8,8,8,8,8,-8,-9,8,-43,-50,-51,8,8,-41,-42,-47,-45,-44,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-57,]),'(':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,79,80,81,83,84,85,96,97,98,100,102,103,106,107,108,109,110,111,112,113,114,115,116,],[15,15,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,29,-55,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,50,50,53,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-56,50,29,-1,50,-54,50,50,50,50,50,50,50,50,50,50,50,-8,-9,103,-43,-50,-51,50,50,-41,-42,-47,-45,-44,29,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-57,]),'ID':([0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,58,60,61,62,63,64,65,66,67,68,69,70,73,74,76,79,80,81,83,84,85,96,97,98,100,102,103,106,107,108,109,110,111,112,113,114,115,116,],[16,16,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,48,-55,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-56,16,48,76,-1,16,-54,16,16,16,16,16,16,16,16,16,16,16,-8,-9,76,16,-43,-50,-51,16,16,-41,-42,-47,-45,-44,48,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-57,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,73,74,81,83,96,97,100,106,107,108,109,110,111,112,113,114,115,116,],[0,-2,-4,-5,-6,-7,-12,-13,-14,-15,-16,-17,-18,-19,-55,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-3,-8,-9,-50,-51,-41,-42,-45,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-57,]),')':([7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,34,35,48,51,52,53,55,56,57,58,59,71,72,75,76,77,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,],[-12,-13,-14,-15,-16,-17,-18,-19,-55,-20,-21,-22,-23,-24,-25,-26,-27,-36,-37,-38,-1,-1,-56,73,74,-1,81,-1,-53,-54,83,96,97,98,-1,-49,100,-50,-52,-51,-11,106,107,108,109,110,111,112,113,114,115,-41,-48,-45,-46,116,-10,-28,-29,-30,-31,-32,-33,-34,-35,-39,-40,-57,]),'DEFINE':([15,103,],[30,30,]),'PRINT_NUM':([15,],[31,]),'PRINT_BOOL':([15,],[32,]),'FUN':([15,29,50,103,],[33,33,33,33,]),'IF':([15,50,103,],[36,36,36,]),'+':([15,50,103,],[37,37,37,]),'-':([15,50,103,],[38,38,38,]),'*':([15,50,103,],[39,39,39,]),'/':([15,50,103,],[40,40,40,]),'MODULUS':([15,50,103,],[41,41,41,]),'>':([15,50,103,],[42,42,42,]),'<':([15,50,103,],[43,43,43,]),'=':([15,50,103,],[44,44,44,]),'AND':([15,50,103,],[45,45,45,]),'OR':([15,50,103,],[46,46,46,]),'NOT':([15,50,103,],[47,47,47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([0,3,],[2,28,]),'stmt':([0,3,],[3,3,]),'exp':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[4,4,51,52,58,58,60,61,62,63,64,65,66,67,68,69,70,71,72,58,84,85,87,85,89,90,91,92,85,85,85,101,104,85,]),'def_stmt':([0,3,79,],[5,5,102,]),'print_stmt':([0,3,],[6,6,]),'variable':([0,3,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[9,9,49,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'num_op':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'logical_op':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'fun_exp':([0,3,15,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,103,],[12,12,34,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,34,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,34,]),'fun_call':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'if_exp':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'plus':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'minus':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'multiply':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'divide':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'modulus':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'greater':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'smaller':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'equal':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'and_op':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'or_op':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'not_op':([0,3,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,56,60,61,62,63,64,65,66,67,68,69,70,79,84,85,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'fun_name':([15,50,103,],[35,35,35,]),'fun_ids':([33,],[54,]),'params':([34,35,56,],[55,59,82,]),'param':([34,35,56,],[56,56,56,]),'empty':([34,35,53,54,56,76,],[57,57,77,80,57,77,]),'ids':([53,76,],[75,99,]),'fun_body':([54,],[78,]),'def_stmts':([54,],[79,]),'exps':([61,63,68,69,70,85,],[86,88,93,94,95,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','my_yacc.py',19),
  ('program -> stmts','program',1,'p_program','my_yacc.py',24),
  ('stmts -> stmt stmts','stmts',2,'p_stmts','my_yacc.py',29),
  ('stmts -> stmt','stmts',1,'p_stmts','my_yacc.py',30),
  ('stmt -> exp','stmt',1,'p_stmt','my_yacc.py',45),
  ('stmt -> def_stmt','stmt',1,'p_stmt','my_yacc.py',46),
  ('stmt -> print_stmt','stmt',1,'p_stmt','my_yacc.py',47),
  ('print_stmt -> ( PRINT_NUM exp )','print_stmt',4,'p_print_stmt','my_yacc.py',53),
  ('print_stmt -> ( PRINT_BOOL exp )','print_stmt',4,'p_print_stmt','my_yacc.py',54),
  ('exps -> exp exps','exps',2,'p_exps','my_yacc.py',64),
  ('exps -> exp','exps',1,'p_exps','my_yacc.py',65),
  ('exp -> BOOL_VAL','exp',1,'p_exp','my_yacc.py',75),
  ('exp -> NUMBER','exp',1,'p_exp','my_yacc.py',76),
  ('exp -> variable','exp',1,'p_exp','my_yacc.py',77),
  ('exp -> num_op','exp',1,'p_exp','my_yacc.py',78),
  ('exp -> logical_op','exp',1,'p_exp','my_yacc.py',79),
  ('exp -> fun_exp','exp',1,'p_exp','my_yacc.py',80),
  ('exp -> fun_call','exp',1,'p_exp','my_yacc.py',81),
  ('exp -> if_exp','exp',1,'p_exp','my_yacc.py',82),
  ('num_op -> plus','num_op',1,'p_num_op','my_yacc.py',93),
  ('num_op -> minus','num_op',1,'p_num_op','my_yacc.py',94),
  ('num_op -> multiply','num_op',1,'p_num_op','my_yacc.py',95),
  ('num_op -> divide','num_op',1,'p_num_op','my_yacc.py',96),
  ('num_op -> modulus','num_op',1,'p_num_op','my_yacc.py',97),
  ('num_op -> greater','num_op',1,'p_num_op','my_yacc.py',98),
  ('num_op -> smaller','num_op',1,'p_num_op','my_yacc.py',99),
  ('num_op -> equal','num_op',1,'p_num_op','my_yacc.py',100),
  ('plus -> ( + exp exps )','plus',5,'p_plus','my_yacc.py',106),
  ('minus -> ( - exp exp )','minus',5,'p_minus','my_yacc.py',112),
  ('multiply -> ( * exp exps )','multiply',5,'p_multiply','my_yacc.py',118),
  ('divide -> ( / exp exp )','divide',5,'p_divide','my_yacc.py',124),
  ('modulus -> ( MODULUS exp exp )','modulus',5,'p_modulus','my_yacc.py',130),
  ('greater -> ( > exp exp )','greater',5,'p_greater','my_yacc.py',136),
  ('smaller -> ( < exp exp )','smaller',5,'p_smaller','my_yacc.py',142),
  ('equal -> ( = exp exps )','equal',5,'p_equal','my_yacc.py',148),
  ('logical_op -> and_op','logical_op',1,'p_logical_op','my_yacc.py',154),
  ('logical_op -> or_op','logical_op',1,'p_logical_op','my_yacc.py',155),
  ('logical_op -> not_op','logical_op',1,'p_logical_op','my_yacc.py',156),
  ('and_op -> ( AND exp exps )','and_op',5,'p_and_op','my_yacc.py',162),
  ('or_op -> ( OR exp exps )','or_op',5,'p_or_op','my_yacc.py',168),
  ('not_op -> ( NOT exp )','not_op',4,'p_not_op','my_yacc.py',175),
  ('def_stmt -> ( DEFINE variable exp )','def_stmt',5,'p_def_stmt','my_yacc.py',181),
  ('def_stmts -> empty','def_stmts',1,'p_def_stmts','my_yacc.py',189),
  ('def_stmts -> def_stmts def_stmt','def_stmts',2,'p_def_stmts','my_yacc.py',190),
  ('fun_exp -> ( FUN fun_ids fun_body )','fun_exp',5,'p_fun_exp','my_yacc.py',205),
  ('fun_body -> def_stmts exp','fun_body',2,'p_fun_body','my_yacc.py',215),
  ('fun_ids -> ( ids )','fun_ids',3,'p_fun_ids','my_yacc.py',226),
  ('ids -> ID ids','ids',2,'p_ids','my_yacc.py',232),
  ('ids -> empty','ids',1,'p_ids','my_yacc.py',233),
  ('fun_call -> ( fun_exp params )','fun_call',4,'p_fun_call','my_yacc.py',248),
  ('fun_call -> ( fun_name params )','fun_call',4,'p_fun_call','my_yacc.py',249),
  ('params -> param params','params',2,'p_params','my_yacc.py',257),
  ('params -> empty','params',1,'p_params','my_yacc.py',258),
  ('param -> exp','param',1,'p_param','my_yacc.py',267),
  ('variable -> ID','variable',1,'p_variable','my_yacc.py',273),
  ('fun_name -> ID','fun_name',1,'p_fun_name','my_yacc.py',281),
  ('if_exp -> ( IF exp exp exp )','if_exp',6,'p_if_exp','my_yacc.py',288),
]
