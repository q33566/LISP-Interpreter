Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SEPRATOR

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> stmts
Rule 3     stmts -> stmt stmts
Rule 4     stmts -> stmt
Rule 5     stmt -> exp
Rule 6     stmt -> def_stmt
Rule 7     stmt -> print_stmt
Rule 8     print_stmt -> ( PRINT_NUM exp )
Rule 9     print_stmt -> ( PRINT_BOOL exp )
Rule 10    exps -> exp exps
Rule 11    exps -> exp
Rule 12    exp -> BOOL_VAL
Rule 13    exp -> NUMBER
Rule 14    exp -> variable
Rule 15    exp -> num_op
Rule 16    exp -> logical_op
Rule 17    exp -> fun_exp
Rule 18    exp -> fun_call
Rule 19    exp -> if_exp
Rule 20    num_op -> plus
Rule 21    num_op -> minus
Rule 22    num_op -> multiply
Rule 23    num_op -> divide
Rule 24    num_op -> modulus
Rule 25    num_op -> greater
Rule 26    num_op -> smaller
Rule 27    num_op -> equal
Rule 28    plus -> ( + exp exps )
Rule 29    minus -> ( - exp exp )
Rule 30    multiply -> ( * exp exps )
Rule 31    divide -> ( / exp exp )
Rule 32    modulus -> ( MODULUS exp exp )
Rule 33    greater -> ( > exp exp )
Rule 34    smaller -> ( < exp exp )
Rule 35    equal -> ( = exp exps )
Rule 36    logical_op -> and_op
Rule 37    logical_op -> or_op
Rule 38    logical_op -> not_op
Rule 39    and_op -> ( AND exp exps )
Rule 40    or_op -> ( OR exp exps )
Rule 41    not_op -> ( NOT exp )
Rule 42    def_stmt -> ( DEFINE ID exp )
Rule 43    fun_exp -> ( FUN fun_ids exp )
Rule 44    fun_ids -> ( ids )
Rule 45    ids -> ID ids
Rule 46    ids -> empty
Rule 47    last_exp -> exp
Rule 48    fun_call -> fun_exp params
Rule 49    fun_call -> fun_name params
Rule 50    params -> param params
Rule 51    params -> empty
Rule 52    param -> exp
Rule 53    variable -> ID
Rule 54    fun_name -> ID
Rule 55    if_exp -> ( IF exp exp exp )

Terminals, with rules where they appear

(                    : 8 9 28 29 30 31 32 33 34 35 39 40 41 42 43 44 55
)                    : 8 9 28 29 30 31 32 33 34 35 39 40 41 42 43 44 55
*                    : 30
+                    : 28
-                    : 29
/                    : 31
<                    : 34
=                    : 35
>                    : 33
AND                  : 39
BOOL_VAL             : 12
DEFINE               : 42
FUN                  : 43
ID                   : 42 45 53 54
IF                   : 55
MODULUS              : 32
NOT                  : 41
NUMBER               : 13
OR                   : 40
PRINT_BOOL           : 9
PRINT_NUM            : 8
SEPRATOR             : 
error                : 

Nonterminals, with rules where they appear

and_op               : 36
def_stmt             : 6
divide               : 23
empty                : 46 51
equal                : 27
exp                  : 5 8 9 10 11 28 29 29 30 31 31 32 32 33 33 34 34 35 39 40 41 42 43 47 52 55 55 55
exps                 : 10 28 30 35 39 40
fun_call             : 18
fun_exp              : 17 48
fun_ids              : 43
fun_name             : 49
greater              : 25
ids                  : 44 45
if_exp               : 19
last_exp             : 
logical_op           : 16
minus                : 21
modulus              : 24
multiply             : 22
not_op               : 38
num_op               : 15
or_op                : 37
param                : 50
params               : 48 49 50
plus                 : 20
print_stmt           : 7
program              : 0
smaller              : 26
stmt                 : 3 4
stmts                : 2 3
variable             : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . stmts
    (3) stmts -> . stmt stmts
    (4) stmts -> . stmt
    (5) stmt -> . exp
    (6) stmt -> . def_stmt
    (7) stmt -> . print_stmt
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (42) def_stmt -> . ( DEFINE ID exp )
    (8) print_stmt -> . ( PRINT_NUM exp )
    (9) print_stmt -> . ( PRINT_BOOL exp )
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 15
    ID              shift and go to state 16

    program                        shift and go to state 1
    stmts                          shift and go to state 2
    stmt                           shift and go to state 3
    exp                            shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (2) program -> stmts .

    $end            reduce using rule 2 (program -> stmts .)


state 3

    (3) stmts -> stmt . stmts
    (4) stmts -> stmt .
    (3) stmts -> . stmt stmts
    (4) stmts -> . stmt
    (5) stmt -> . exp
    (6) stmt -> . def_stmt
    (7) stmt -> . print_stmt
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (42) def_stmt -> . ( DEFINE ID exp )
    (8) print_stmt -> . ( PRINT_NUM exp )
    (9) print_stmt -> . ( PRINT_BOOL exp )
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    $end            reduce using rule 4 (stmts -> stmt .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    (               shift and go to state 15
    ID              shift and go to state 16

    stmt                           shift and go to state 3
    stmts                          shift and go to state 29
    exp                            shift and go to state 4
    def_stmt                       shift and go to state 5
    print_stmt                     shift and go to state 6
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 4

    (5) stmt -> exp .

    BOOL_VAL        reduce using rule 5 (stmt -> exp .)
    NUMBER          reduce using rule 5 (stmt -> exp .)
    (               reduce using rule 5 (stmt -> exp .)
    ID              reduce using rule 5 (stmt -> exp .)
    $end            reduce using rule 5 (stmt -> exp .)


state 5

    (6) stmt -> def_stmt .

    BOOL_VAL        reduce using rule 6 (stmt -> def_stmt .)
    NUMBER          reduce using rule 6 (stmt -> def_stmt .)
    (               reduce using rule 6 (stmt -> def_stmt .)
    ID              reduce using rule 6 (stmt -> def_stmt .)
    $end            reduce using rule 6 (stmt -> def_stmt .)


state 6

    (7) stmt -> print_stmt .

    BOOL_VAL        reduce using rule 7 (stmt -> print_stmt .)
    NUMBER          reduce using rule 7 (stmt -> print_stmt .)
    (               reduce using rule 7 (stmt -> print_stmt .)
    ID              reduce using rule 7 (stmt -> print_stmt .)
    $end            reduce using rule 7 (stmt -> print_stmt .)


state 7

    (12) exp -> BOOL_VAL .

    BOOL_VAL        reduce using rule 12 (exp -> BOOL_VAL .)
    NUMBER          reduce using rule 12 (exp -> BOOL_VAL .)
    (               reduce using rule 12 (exp -> BOOL_VAL .)
    ID              reduce using rule 12 (exp -> BOOL_VAL .)
    $end            reduce using rule 12 (exp -> BOOL_VAL .)
    )               reduce using rule 12 (exp -> BOOL_VAL .)


state 8

    (13) exp -> NUMBER .

    BOOL_VAL        reduce using rule 13 (exp -> NUMBER .)
    NUMBER          reduce using rule 13 (exp -> NUMBER .)
    (               reduce using rule 13 (exp -> NUMBER .)
    ID              reduce using rule 13 (exp -> NUMBER .)
    $end            reduce using rule 13 (exp -> NUMBER .)
    )               reduce using rule 13 (exp -> NUMBER .)


state 9

    (14) exp -> variable .

    BOOL_VAL        reduce using rule 14 (exp -> variable .)
    NUMBER          reduce using rule 14 (exp -> variable .)
    (               reduce using rule 14 (exp -> variable .)
    ID              reduce using rule 14 (exp -> variable .)
    $end            reduce using rule 14 (exp -> variable .)
    )               reduce using rule 14 (exp -> variable .)


state 10

    (15) exp -> num_op .

    BOOL_VAL        reduce using rule 15 (exp -> num_op .)
    NUMBER          reduce using rule 15 (exp -> num_op .)
    (               reduce using rule 15 (exp -> num_op .)
    ID              reduce using rule 15 (exp -> num_op .)
    $end            reduce using rule 15 (exp -> num_op .)
    )               reduce using rule 15 (exp -> num_op .)


state 11

    (16) exp -> logical_op .

    BOOL_VAL        reduce using rule 16 (exp -> logical_op .)
    NUMBER          reduce using rule 16 (exp -> logical_op .)
    (               reduce using rule 16 (exp -> logical_op .)
    ID              reduce using rule 16 (exp -> logical_op .)
    $end            reduce using rule 16 (exp -> logical_op .)
    )               reduce using rule 16 (exp -> logical_op .)


state 12

    (17) exp -> fun_exp .
    (48) fun_call -> fun_exp . params
    (50) params -> . param params
    (51) params -> . empty
    (52) param -> . exp
    (1) empty -> .
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

  ! reduce/reduce conflict for BOOL_VAL resolved using rule 1 (empty -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 1 (empty -> .)
  ! reduce/reduce conflict for ( resolved using rule 1 (empty -> .)
  ! reduce/reduce conflict for ID resolved using rule 1 (empty -> .)
  ! reduce/reduce conflict for $end resolved using rule 1 (empty -> .)
  ! reduce/reduce conflict for ) resolved using rule 1 (empty -> .)
  ! shift/reduce conflict for BOOL_VAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 1 (empty -> .)
    )               reduce using rule 1 (empty -> .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

  ! BOOL_VAL        [ reduce using rule 17 (exp -> fun_exp .) ]
  ! NUMBER          [ reduce using rule 17 (exp -> fun_exp .) ]
  ! (               [ reduce using rule 17 (exp -> fun_exp .) ]
  ! ID              [ reduce using rule 17 (exp -> fun_exp .) ]
  ! $end            [ reduce using rule 17 (exp -> fun_exp .) ]
  ! )               [ reduce using rule 17 (exp -> fun_exp .) ]
  ! BOOL_VAL        [ reduce using rule 1 (empty -> .) ]
  ! NUMBER          [ reduce using rule 1 (empty -> .) ]
  ! (               [ reduce using rule 1 (empty -> .) ]
  ! ID              [ reduce using rule 1 (empty -> .) ]

    fun_exp                        shift and go to state 12
    params                         shift and go to state 30
    param                          shift and go to state 31
    empty                          shift and go to state 32
    exp                            shift and go to state 33
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 13

    (18) exp -> fun_call .

    BOOL_VAL        reduce using rule 18 (exp -> fun_call .)
    NUMBER          reduce using rule 18 (exp -> fun_call .)
    (               reduce using rule 18 (exp -> fun_call .)
    ID              reduce using rule 18 (exp -> fun_call .)
    $end            reduce using rule 18 (exp -> fun_call .)
    )               reduce using rule 18 (exp -> fun_call .)


state 14

    (19) exp -> if_exp .

    BOOL_VAL        reduce using rule 19 (exp -> if_exp .)
    NUMBER          reduce using rule 19 (exp -> if_exp .)
    (               reduce using rule 19 (exp -> if_exp .)
    ID              reduce using rule 19 (exp -> if_exp .)
    $end            reduce using rule 19 (exp -> if_exp .)
    )               reduce using rule 19 (exp -> if_exp .)


state 15

    (42) def_stmt -> ( . DEFINE ID exp )
    (8) print_stmt -> ( . PRINT_NUM exp )
    (9) print_stmt -> ( . PRINT_BOOL exp )
    (43) fun_exp -> ( . FUN fun_ids exp )
    (55) if_exp -> ( . IF exp exp exp )
    (28) plus -> ( . + exp exps )
    (29) minus -> ( . - exp exp )
    (30) multiply -> ( . * exp exps )
    (31) divide -> ( . / exp exp )
    (32) modulus -> ( . MODULUS exp exp )
    (33) greater -> ( . > exp exp )
    (34) smaller -> ( . < exp exp )
    (35) equal -> ( . = exp exps )
    (39) and_op -> ( . AND exp exps )
    (40) or_op -> ( . OR exp exps )
    (41) not_op -> ( . NOT exp )

    DEFINE          shift and go to state 35
    PRINT_NUM       shift and go to state 36
    PRINT_BOOL      shift and go to state 37
    FUN             shift and go to state 38
    IF              shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    MODULUS         shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46
    =               shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    NOT             shift and go to state 50


state 16

    (53) variable -> ID .
    (54) fun_name -> ID .

  ! reduce/reduce conflict for BOOL_VAL resolved using rule 53 (variable -> ID .)
  ! reduce/reduce conflict for NUMBER resolved using rule 53 (variable -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 53 (variable -> ID .)
  ! reduce/reduce conflict for ( resolved using rule 53 (variable -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 53 (variable -> ID .)
  ! reduce/reduce conflict for ) resolved using rule 53 (variable -> ID .)
    BOOL_VAL        reduce using rule 53 (variable -> ID .)
    NUMBER          reduce using rule 53 (variable -> ID .)
    (               reduce using rule 53 (variable -> ID .)
    ID              reduce using rule 53 (variable -> ID .)
    $end            reduce using rule 53 (variable -> ID .)
    )               reduce using rule 53 (variable -> ID .)

  ! BOOL_VAL        [ reduce using rule 54 (fun_name -> ID .) ]
  ! NUMBER          [ reduce using rule 54 (fun_name -> ID .) ]
  ! ID              [ reduce using rule 54 (fun_name -> ID .) ]
  ! (               [ reduce using rule 54 (fun_name -> ID .) ]
  ! $end            [ reduce using rule 54 (fun_name -> ID .) ]
  ! )               [ reduce using rule 54 (fun_name -> ID .) ]


state 17

    (20) num_op -> plus .

    BOOL_VAL        reduce using rule 20 (num_op -> plus .)
    NUMBER          reduce using rule 20 (num_op -> plus .)
    (               reduce using rule 20 (num_op -> plus .)
    ID              reduce using rule 20 (num_op -> plus .)
    $end            reduce using rule 20 (num_op -> plus .)
    )               reduce using rule 20 (num_op -> plus .)


state 18

    (21) num_op -> minus .

    BOOL_VAL        reduce using rule 21 (num_op -> minus .)
    NUMBER          reduce using rule 21 (num_op -> minus .)
    (               reduce using rule 21 (num_op -> minus .)
    ID              reduce using rule 21 (num_op -> minus .)
    $end            reduce using rule 21 (num_op -> minus .)
    )               reduce using rule 21 (num_op -> minus .)


state 19

    (22) num_op -> multiply .

    BOOL_VAL        reduce using rule 22 (num_op -> multiply .)
    NUMBER          reduce using rule 22 (num_op -> multiply .)
    (               reduce using rule 22 (num_op -> multiply .)
    ID              reduce using rule 22 (num_op -> multiply .)
    $end            reduce using rule 22 (num_op -> multiply .)
    )               reduce using rule 22 (num_op -> multiply .)


state 20

    (23) num_op -> divide .

    BOOL_VAL        reduce using rule 23 (num_op -> divide .)
    NUMBER          reduce using rule 23 (num_op -> divide .)
    (               reduce using rule 23 (num_op -> divide .)
    ID              reduce using rule 23 (num_op -> divide .)
    $end            reduce using rule 23 (num_op -> divide .)
    )               reduce using rule 23 (num_op -> divide .)


state 21

    (24) num_op -> modulus .

    BOOL_VAL        reduce using rule 24 (num_op -> modulus .)
    NUMBER          reduce using rule 24 (num_op -> modulus .)
    (               reduce using rule 24 (num_op -> modulus .)
    ID              reduce using rule 24 (num_op -> modulus .)
    $end            reduce using rule 24 (num_op -> modulus .)
    )               reduce using rule 24 (num_op -> modulus .)


state 22

    (25) num_op -> greater .

    BOOL_VAL        reduce using rule 25 (num_op -> greater .)
    NUMBER          reduce using rule 25 (num_op -> greater .)
    (               reduce using rule 25 (num_op -> greater .)
    ID              reduce using rule 25 (num_op -> greater .)
    $end            reduce using rule 25 (num_op -> greater .)
    )               reduce using rule 25 (num_op -> greater .)


state 23

    (26) num_op -> smaller .

    BOOL_VAL        reduce using rule 26 (num_op -> smaller .)
    NUMBER          reduce using rule 26 (num_op -> smaller .)
    (               reduce using rule 26 (num_op -> smaller .)
    ID              reduce using rule 26 (num_op -> smaller .)
    $end            reduce using rule 26 (num_op -> smaller .)
    )               reduce using rule 26 (num_op -> smaller .)


state 24

    (27) num_op -> equal .

    BOOL_VAL        reduce using rule 27 (num_op -> equal .)
    NUMBER          reduce using rule 27 (num_op -> equal .)
    (               reduce using rule 27 (num_op -> equal .)
    ID              reduce using rule 27 (num_op -> equal .)
    $end            reduce using rule 27 (num_op -> equal .)
    )               reduce using rule 27 (num_op -> equal .)


state 25

    (36) logical_op -> and_op .

    BOOL_VAL        reduce using rule 36 (logical_op -> and_op .)
    NUMBER          reduce using rule 36 (logical_op -> and_op .)
    (               reduce using rule 36 (logical_op -> and_op .)
    ID              reduce using rule 36 (logical_op -> and_op .)
    $end            reduce using rule 36 (logical_op -> and_op .)
    )               reduce using rule 36 (logical_op -> and_op .)


state 26

    (37) logical_op -> or_op .

    BOOL_VAL        reduce using rule 37 (logical_op -> or_op .)
    NUMBER          reduce using rule 37 (logical_op -> or_op .)
    (               reduce using rule 37 (logical_op -> or_op .)
    ID              reduce using rule 37 (logical_op -> or_op .)
    $end            reduce using rule 37 (logical_op -> or_op .)
    )               reduce using rule 37 (logical_op -> or_op .)


state 27

    (38) logical_op -> not_op .

    BOOL_VAL        reduce using rule 38 (logical_op -> not_op .)
    NUMBER          reduce using rule 38 (logical_op -> not_op .)
    (               reduce using rule 38 (logical_op -> not_op .)
    ID              reduce using rule 38 (logical_op -> not_op .)
    $end            reduce using rule 38 (logical_op -> not_op .)
    )               reduce using rule 38 (logical_op -> not_op .)


state 28

    (49) fun_call -> fun_name . params
    (50) params -> . param params
    (51) params -> . empty
    (52) param -> . exp
    (1) empty -> .
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

  ! shift/reduce conflict for BOOL_VAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 1 (empty -> .)
    )               reduce using rule 1 (empty -> .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

  ! BOOL_VAL        [ reduce using rule 1 (empty -> .) ]
  ! NUMBER          [ reduce using rule 1 (empty -> .) ]
  ! (               [ reduce using rule 1 (empty -> .) ]
  ! ID              [ reduce using rule 1 (empty -> .) ]

    fun_name                       shift and go to state 28
    params                         shift and go to state 51
    param                          shift and go to state 31
    empty                          shift and go to state 32
    exp                            shift and go to state 33
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27

state 29

    (3) stmts -> stmt stmts .

    $end            reduce using rule 3 (stmts -> stmt stmts .)


state 30

    (48) fun_call -> fun_exp params .

    BOOL_VAL        reduce using rule 48 (fun_call -> fun_exp params .)
    NUMBER          reduce using rule 48 (fun_call -> fun_exp params .)
    (               reduce using rule 48 (fun_call -> fun_exp params .)
    ID              reduce using rule 48 (fun_call -> fun_exp params .)
    $end            reduce using rule 48 (fun_call -> fun_exp params .)
    )               reduce using rule 48 (fun_call -> fun_exp params .)


state 31

    (50) params -> param . params
    (50) params -> . param params
    (51) params -> . empty
    (52) param -> . exp
    (1) empty -> .
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

  ! shift/reduce conflict for BOOL_VAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    $end            reduce using rule 1 (empty -> .)
    )               reduce using rule 1 (empty -> .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

  ! BOOL_VAL        [ reduce using rule 1 (empty -> .) ]
  ! NUMBER          [ reduce using rule 1 (empty -> .) ]
  ! (               [ reduce using rule 1 (empty -> .) ]
  ! ID              [ reduce using rule 1 (empty -> .) ]

    param                          shift and go to state 31
    params                         shift and go to state 52
    empty                          shift and go to state 32
    exp                            shift and go to state 33
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 32

    (51) params -> empty .

    BOOL_VAL        reduce using rule 51 (params -> empty .)
    NUMBER          reduce using rule 51 (params -> empty .)
    (               reduce using rule 51 (params -> empty .)
    ID              reduce using rule 51 (params -> empty .)
    $end            reduce using rule 51 (params -> empty .)
    )               reduce using rule 51 (params -> empty .)


state 33

    (52) param -> exp .

    BOOL_VAL        reduce using rule 52 (param -> exp .)
    NUMBER          reduce using rule 52 (param -> exp .)
    (               reduce using rule 52 (param -> exp .)
    ID              reduce using rule 52 (param -> exp .)
    $end            reduce using rule 52 (param -> exp .)
    )               reduce using rule 52 (param -> exp .)


state 34

    (43) fun_exp -> ( . FUN fun_ids exp )
    (55) if_exp -> ( . IF exp exp exp )
    (28) plus -> ( . + exp exps )
    (29) minus -> ( . - exp exp )
    (30) multiply -> ( . * exp exps )
    (31) divide -> ( . / exp exp )
    (32) modulus -> ( . MODULUS exp exp )
    (33) greater -> ( . > exp exp )
    (34) smaller -> ( . < exp exp )
    (35) equal -> ( . = exp exps )
    (39) and_op -> ( . AND exp exps )
    (40) or_op -> ( . OR exp exps )
    (41) not_op -> ( . NOT exp )

    FUN             shift and go to state 38
    IF              shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    MODULUS         shift and go to state 44
    >               shift and go to state 45
    <               shift and go to state 46
    =               shift and go to state 47
    AND             shift and go to state 48
    OR              shift and go to state 49
    NOT             shift and go to state 50


state 35

    (42) def_stmt -> ( DEFINE . ID exp )

    ID              shift and go to state 53


state 36

    (8) print_stmt -> ( PRINT_NUM . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 54
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 37

    (9) print_stmt -> ( PRINT_BOOL . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 55
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 38

    (43) fun_exp -> ( FUN . fun_ids exp )
    (44) fun_ids -> . ( ids )

    (               shift and go to state 56

    fun_ids                        shift and go to state 57

state 39

    (55) if_exp -> ( IF . exp exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 58
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 40

    (28) plus -> ( + . exp exps )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 59
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 41

    (29) minus -> ( - . exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 60
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 42

    (30) multiply -> ( * . exp exps )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 61
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 43

    (31) divide -> ( / . exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 62
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 44

    (32) modulus -> ( MODULUS . exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 63
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 45

    (33) greater -> ( > . exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 64
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 46

    (34) smaller -> ( < . exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 65
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 47

    (35) equal -> ( = . exp exps )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 66
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 48

    (39) and_op -> ( AND . exp exps )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 67
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 49

    (40) or_op -> ( OR . exp exps )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 68
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 50

    (41) not_op -> ( NOT . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 69
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 51

    (49) fun_call -> fun_name params .

    BOOL_VAL        reduce using rule 49 (fun_call -> fun_name params .)
    NUMBER          reduce using rule 49 (fun_call -> fun_name params .)
    (               reduce using rule 49 (fun_call -> fun_name params .)
    ID              reduce using rule 49 (fun_call -> fun_name params .)
    $end            reduce using rule 49 (fun_call -> fun_name params .)
    )               reduce using rule 49 (fun_call -> fun_name params .)


state 52

    (50) params -> param params .

    BOOL_VAL        reduce using rule 50 (params -> param params .)
    NUMBER          reduce using rule 50 (params -> param params .)
    (               reduce using rule 50 (params -> param params .)
    ID              reduce using rule 50 (params -> param params .)
    $end            reduce using rule 50 (params -> param params .)
    )               reduce using rule 50 (params -> param params .)


state 53

    (42) def_stmt -> ( DEFINE ID . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 70
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 54

    (8) print_stmt -> ( PRINT_NUM exp . )

    )               shift and go to state 71


state 55

    (9) print_stmt -> ( PRINT_BOOL exp . )

    )               shift and go to state 72


state 56

    (44) fun_ids -> ( . ids )
    (45) ids -> . ID ids
    (46) ids -> . empty
    (1) empty -> .

    ID              shift and go to state 74
    )               reduce using rule 1 (empty -> .)

    ids                            shift and go to state 73
    empty                          shift and go to state 75

state 57

    (43) fun_exp -> ( FUN fun_ids . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 76
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 58

    (55) if_exp -> ( IF exp . exp exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 77
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 59

    (28) plus -> ( + exp . exps )
    (10) exps -> . exp exps
    (11) exps -> . exp
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 78
    exps                           shift and go to state 79
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 60

    (29) minus -> ( - exp . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 80
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 61

    (30) multiply -> ( * exp . exps )
    (10) exps -> . exp exps
    (11) exps -> . exp
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 78
    exps                           shift and go to state 81
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 62

    (31) divide -> ( / exp . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 82
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 63

    (32) modulus -> ( MODULUS exp . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 83
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 64

    (33) greater -> ( > exp . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 84
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 65

    (34) smaller -> ( < exp . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 85
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 66

    (35) equal -> ( = exp . exps )
    (10) exps -> . exp exps
    (11) exps -> . exp
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 78
    exps                           shift and go to state 86
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 67

    (39) and_op -> ( AND exp . exps )
    (10) exps -> . exp exps
    (11) exps -> . exp
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 78
    exps                           shift and go to state 87
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 68

    (40) or_op -> ( OR exp . exps )
    (10) exps -> . exp exps
    (11) exps -> . exp
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 78
    exps                           shift and go to state 88
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 69

    (41) not_op -> ( NOT exp . )

    )               shift and go to state 89


state 70

    (42) def_stmt -> ( DEFINE ID exp . )

    )               shift and go to state 90


state 71

    (8) print_stmt -> ( PRINT_NUM exp ) .

    BOOL_VAL        reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
    NUMBER          reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
    (               reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
    ID              reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)
    $end            reduce using rule 8 (print_stmt -> ( PRINT_NUM exp ) .)


state 72

    (9) print_stmt -> ( PRINT_BOOL exp ) .

    BOOL_VAL        reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
    NUMBER          reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
    (               reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
    ID              reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)
    $end            reduce using rule 9 (print_stmt -> ( PRINT_BOOL exp ) .)


state 73

    (44) fun_ids -> ( ids . )

    )               shift and go to state 91


state 74

    (45) ids -> ID . ids
    (45) ids -> . ID ids
    (46) ids -> . empty
    (1) empty -> .

    ID              shift and go to state 74
    )               reduce using rule 1 (empty -> .)

    ids                            shift and go to state 92
    empty                          shift and go to state 75

state 75

    (46) ids -> empty .

    )               reduce using rule 46 (ids -> empty .)


state 76

    (43) fun_exp -> ( FUN fun_ids exp . )

    )               shift and go to state 93


state 77

    (55) if_exp -> ( IF exp exp . exp )
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 94
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 78

    (10) exps -> exp . exps
    (11) exps -> exp .
    (10) exps -> . exp exps
    (11) exps -> . exp
    (12) exp -> . BOOL_VAL
    (13) exp -> . NUMBER
    (14) exp -> . variable
    (15) exp -> . num_op
    (16) exp -> . logical_op
    (17) exp -> . fun_exp
    (18) exp -> . fun_call
    (19) exp -> . if_exp
    (53) variable -> . ID
    (20) num_op -> . plus
    (21) num_op -> . minus
    (22) num_op -> . multiply
    (23) num_op -> . divide
    (24) num_op -> . modulus
    (25) num_op -> . greater
    (26) num_op -> . smaller
    (27) num_op -> . equal
    (36) logical_op -> . and_op
    (37) logical_op -> . or_op
    (38) logical_op -> . not_op
    (43) fun_exp -> . ( FUN fun_ids exp )
    (48) fun_call -> . fun_exp params
    (49) fun_call -> . fun_name params
    (55) if_exp -> . ( IF exp exp exp )
    (28) plus -> . ( + exp exps )
    (29) minus -> . ( - exp exp )
    (30) multiply -> . ( * exp exps )
    (31) divide -> . ( / exp exp )
    (32) modulus -> . ( MODULUS exp exp )
    (33) greater -> . ( > exp exp )
    (34) smaller -> . ( < exp exp )
    (35) equal -> . ( = exp exps )
    (39) and_op -> . ( AND exp exps )
    (40) or_op -> . ( OR exp exps )
    (41) not_op -> . ( NOT exp )
    (54) fun_name -> . ID

    )               reduce using rule 11 (exps -> exp .)
    BOOL_VAL        shift and go to state 7
    NUMBER          shift and go to state 8
    ID              shift and go to state 16
    (               shift and go to state 34

    exp                            shift and go to state 78
    exps                           shift and go to state 95
    variable                       shift and go to state 9
    num_op                         shift and go to state 10
    logical_op                     shift and go to state 11
    fun_exp                        shift and go to state 12
    fun_call                       shift and go to state 13
    if_exp                         shift and go to state 14
    plus                           shift and go to state 17
    minus                          shift and go to state 18
    multiply                       shift and go to state 19
    divide                         shift and go to state 20
    modulus                        shift and go to state 21
    greater                        shift and go to state 22
    smaller                        shift and go to state 23
    equal                          shift and go to state 24
    and_op                         shift and go to state 25
    or_op                          shift and go to state 26
    not_op                         shift and go to state 27
    fun_name                       shift and go to state 28

state 79

    (28) plus -> ( + exp exps . )

    )               shift and go to state 96


state 80

    (29) minus -> ( - exp exp . )

    )               shift and go to state 97


state 81

    (30) multiply -> ( * exp exps . )

    )               shift and go to state 98


state 82

    (31) divide -> ( / exp exp . )

    )               shift and go to state 99


state 83

    (32) modulus -> ( MODULUS exp exp . )

    )               shift and go to state 100


state 84

    (33) greater -> ( > exp exp . )

    )               shift and go to state 101


state 85

    (34) smaller -> ( < exp exp . )

    )               shift and go to state 102


state 86

    (35) equal -> ( = exp exps . )

    )               shift and go to state 103


state 87

    (39) and_op -> ( AND exp exps . )

    )               shift and go to state 104


state 88

    (40) or_op -> ( OR exp exps . )

    )               shift and go to state 105


state 89

    (41) not_op -> ( NOT exp ) .

    BOOL_VAL        reduce using rule 41 (not_op -> ( NOT exp ) .)
    NUMBER          reduce using rule 41 (not_op -> ( NOT exp ) .)
    (               reduce using rule 41 (not_op -> ( NOT exp ) .)
    ID              reduce using rule 41 (not_op -> ( NOT exp ) .)
    $end            reduce using rule 41 (not_op -> ( NOT exp ) .)
    )               reduce using rule 41 (not_op -> ( NOT exp ) .)


state 90

    (42) def_stmt -> ( DEFINE ID exp ) .

    BOOL_VAL        reduce using rule 42 (def_stmt -> ( DEFINE ID exp ) .)
    NUMBER          reduce using rule 42 (def_stmt -> ( DEFINE ID exp ) .)
    (               reduce using rule 42 (def_stmt -> ( DEFINE ID exp ) .)
    ID              reduce using rule 42 (def_stmt -> ( DEFINE ID exp ) .)
    $end            reduce using rule 42 (def_stmt -> ( DEFINE ID exp ) .)


state 91

    (44) fun_ids -> ( ids ) .

    BOOL_VAL        reduce using rule 44 (fun_ids -> ( ids ) .)
    NUMBER          reduce using rule 44 (fun_ids -> ( ids ) .)
    ID              reduce using rule 44 (fun_ids -> ( ids ) .)
    (               reduce using rule 44 (fun_ids -> ( ids ) .)


state 92

    (45) ids -> ID ids .

    )               reduce using rule 45 (ids -> ID ids .)


state 93

    (43) fun_exp -> ( FUN fun_ids exp ) .

    BOOL_VAL        reduce using rule 43 (fun_exp -> ( FUN fun_ids exp ) .)
    NUMBER          reduce using rule 43 (fun_exp -> ( FUN fun_ids exp ) .)
    ID              reduce using rule 43 (fun_exp -> ( FUN fun_ids exp ) .)
    (               reduce using rule 43 (fun_exp -> ( FUN fun_ids exp ) .)
    $end            reduce using rule 43 (fun_exp -> ( FUN fun_ids exp ) .)
    )               reduce using rule 43 (fun_exp -> ( FUN fun_ids exp ) .)


state 94

    (55) if_exp -> ( IF exp exp exp . )

    )               shift and go to state 106


state 95

    (10) exps -> exp exps .

    )               reduce using rule 10 (exps -> exp exps .)


state 96

    (28) plus -> ( + exp exps ) .

    BOOL_VAL        reduce using rule 28 (plus -> ( + exp exps ) .)
    NUMBER          reduce using rule 28 (plus -> ( + exp exps ) .)
    (               reduce using rule 28 (plus -> ( + exp exps ) .)
    ID              reduce using rule 28 (plus -> ( + exp exps ) .)
    $end            reduce using rule 28 (plus -> ( + exp exps ) .)
    )               reduce using rule 28 (plus -> ( + exp exps ) .)


state 97

    (29) minus -> ( - exp exp ) .

    BOOL_VAL        reduce using rule 29 (minus -> ( - exp exp ) .)
    NUMBER          reduce using rule 29 (minus -> ( - exp exp ) .)
    (               reduce using rule 29 (minus -> ( - exp exp ) .)
    ID              reduce using rule 29 (minus -> ( - exp exp ) .)
    $end            reduce using rule 29 (minus -> ( - exp exp ) .)
    )               reduce using rule 29 (minus -> ( - exp exp ) .)


state 98

    (30) multiply -> ( * exp exps ) .

    BOOL_VAL        reduce using rule 30 (multiply -> ( * exp exps ) .)
    NUMBER          reduce using rule 30 (multiply -> ( * exp exps ) .)
    (               reduce using rule 30 (multiply -> ( * exp exps ) .)
    ID              reduce using rule 30 (multiply -> ( * exp exps ) .)
    $end            reduce using rule 30 (multiply -> ( * exp exps ) .)
    )               reduce using rule 30 (multiply -> ( * exp exps ) .)


state 99

    (31) divide -> ( / exp exp ) .

    BOOL_VAL        reduce using rule 31 (divide -> ( / exp exp ) .)
    NUMBER          reduce using rule 31 (divide -> ( / exp exp ) .)
    (               reduce using rule 31 (divide -> ( / exp exp ) .)
    ID              reduce using rule 31 (divide -> ( / exp exp ) .)
    $end            reduce using rule 31 (divide -> ( / exp exp ) .)
    )               reduce using rule 31 (divide -> ( / exp exp ) .)


state 100

    (32) modulus -> ( MODULUS exp exp ) .

    BOOL_VAL        reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
    NUMBER          reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
    (               reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
    ID              reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
    $end            reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)
    )               reduce using rule 32 (modulus -> ( MODULUS exp exp ) .)


state 101

    (33) greater -> ( > exp exp ) .

    BOOL_VAL        reduce using rule 33 (greater -> ( > exp exp ) .)
    NUMBER          reduce using rule 33 (greater -> ( > exp exp ) .)
    (               reduce using rule 33 (greater -> ( > exp exp ) .)
    ID              reduce using rule 33 (greater -> ( > exp exp ) .)
    $end            reduce using rule 33 (greater -> ( > exp exp ) .)
    )               reduce using rule 33 (greater -> ( > exp exp ) .)


state 102

    (34) smaller -> ( < exp exp ) .

    BOOL_VAL        reduce using rule 34 (smaller -> ( < exp exp ) .)
    NUMBER          reduce using rule 34 (smaller -> ( < exp exp ) .)
    (               reduce using rule 34 (smaller -> ( < exp exp ) .)
    ID              reduce using rule 34 (smaller -> ( < exp exp ) .)
    $end            reduce using rule 34 (smaller -> ( < exp exp ) .)
    )               reduce using rule 34 (smaller -> ( < exp exp ) .)


state 103

    (35) equal -> ( = exp exps ) .

    BOOL_VAL        reduce using rule 35 (equal -> ( = exp exps ) .)
    NUMBER          reduce using rule 35 (equal -> ( = exp exps ) .)
    (               reduce using rule 35 (equal -> ( = exp exps ) .)
    ID              reduce using rule 35 (equal -> ( = exp exps ) .)
    $end            reduce using rule 35 (equal -> ( = exp exps ) .)
    )               reduce using rule 35 (equal -> ( = exp exps ) .)


state 104

    (39) and_op -> ( AND exp exps ) .

    BOOL_VAL        reduce using rule 39 (and_op -> ( AND exp exps ) .)
    NUMBER          reduce using rule 39 (and_op -> ( AND exp exps ) .)
    (               reduce using rule 39 (and_op -> ( AND exp exps ) .)
    ID              reduce using rule 39 (and_op -> ( AND exp exps ) .)
    $end            reduce using rule 39 (and_op -> ( AND exp exps ) .)
    )               reduce using rule 39 (and_op -> ( AND exp exps ) .)


state 105

    (40) or_op -> ( OR exp exps ) .

    BOOL_VAL        reduce using rule 40 (or_op -> ( OR exp exps ) .)
    NUMBER          reduce using rule 40 (or_op -> ( OR exp exps ) .)
    (               reduce using rule 40 (or_op -> ( OR exp exps ) .)
    ID              reduce using rule 40 (or_op -> ( OR exp exps ) .)
    $end            reduce using rule 40 (or_op -> ( OR exp exps ) .)
    )               reduce using rule 40 (or_op -> ( OR exp exps ) .)


state 106

    (55) if_exp -> ( IF exp exp exp ) .

    BOOL_VAL        reduce using rule 55 (if_exp -> ( IF exp exp exp ) .)
    NUMBER          reduce using rule 55 (if_exp -> ( IF exp exp exp ) .)
    (               reduce using rule 55 (if_exp -> ( IF exp exp exp ) .)
    ID              reduce using rule 55 (if_exp -> ( IF exp exp exp ) .)
    $end            reduce using rule 55 (if_exp -> ( IF exp exp exp ) .)
    )               reduce using rule 55 (if_exp -> ( IF exp exp exp ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BOOL_VAL in state 12 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 12 resolved as shift
WARNING: shift/reduce conflict for ID in state 12 resolved as shift
WARNING: shift/reduce conflict for ( in state 12 resolved as shift
WARNING: shift/reduce conflict for BOOL_VAL in state 28 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 28 resolved as shift
WARNING: shift/reduce conflict for ID in state 28 resolved as shift
WARNING: shift/reduce conflict for ( in state 28 resolved as shift
WARNING: shift/reduce conflict for BOOL_VAL in state 31 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for ( in state 31 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (empty -> <empty>)
WARNING: rejected rule (exp -> fun_exp) in state 12
WARNING: reduce/reduce conflict in state 16 resolved using rule (variable -> ID)
WARNING: rejected rule (fun_name -> ID) in state 16
WARNING: Rule (exp -> fun_exp) is never reduced
WARNING: Rule (fun_name -> ID) is never reduced
